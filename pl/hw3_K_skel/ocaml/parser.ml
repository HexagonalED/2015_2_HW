type token =
  | AMPERAMPER
  | AMPERSAND
  | AND
  | AS
  | ASSERT
  | BACKQUOTE
  | BAR
  | BARBAR
  | BARRBRACKET
  | BEGIN
  | CHAR of (char)
  | CLASS
  | COLON
  | COLONCOLON
  | COLONEQUAL
  | COLONGREATER
  | COMMA
  | CONSTRAINT
  | DO
  | DONE
  | DOT
  | DOTDOT
  | DOWNTO
  | ELSE
  | END
  | EOF
  | EQUAL
  | EXCEPTION
  | EXTERNAL
  | FALSE
  | FLOAT of (string)
  | FOR
  | FUN
  | FUNCTION
  | FUNCTOR
  | GREATER
  | GREATERRBRACE
  | GREATERRBRACKET
  | IF
  | IN
  | INCLUDE
  | INFIXOP0 of (string)
  | INFIXOP1 of (string)
  | INFIXOP2 of (string)
  | INFIXOP3 of (string)
  | INFIXOP4 of (string)
  | INHERIT
  | INITIALIZER
  | INT of (int)
  | INT32 of (int32)
  | INT64 of (int64)
  | LABEL of (string)
  | LAZY
  | LBRACE
  | LBRACELESS
  | LBRACKET
  | LBRACKETBAR
  | LBRACKETLESS
  | LBRACKETGREATER
  | LESS
  | LESSMINUS
  | LET
  | LIDENT of (string)
  | LPAREN
  | MATCH
  | METHOD
  | MINUS
  | MINUSDOT
  | MINUSGREATER
  | MODULE
  | MUTABLE
  | NATIVEINT of (nativeint)
  | NEW
  | OBJECT
  | OF
  | OPEN
  | OPTLABEL of (string)
  | OR
  | PLUS
  | PREFIXOP of (string)
  | PRIVATE
  | QUESTION
  | QUESTIONQUESTION
  | QUOTE
  | RBRACE
  | RBRACKET
  | REC
  | RPAREN
  | SEMI
  | SEMISEMI
  | SHARP
  | SIG
  | STAR
  | STRING of (string)
  | STRUCT
  | THEN
  | TILDE
  | TO
  | TRUE
  | TRY
  | TYPE
  | UIDENT of (string)
  | UNDERSCORE
  | VAL
  | VIRTUAL
  | WHEN
  | WHILE
  | WITH

open Parsing;;
let _ = parse_error;;
# 7 "parser.mly"

open Location
open Parsetree;;

let raise_error str = 
  raise (Syntaxerr.Error str)

(* mktyp : core_type_desc -> core_type *)
let mktyp d =
  { ptyp_desc = d; ptyp_loc = symbol_rloc() }
  
(* mkpat : pattern_desc -> pattern *)
let mkpat d =
  { ppat_desc = d; ppat_loc = symbol_rloc() }
  
(* mkexp : expression_desc -> expression *)
let mkexp d =
  { pexp_desc = d; pexp_loc = symbol_rloc() }
  
(* mkstr : structure_item_desc -> structure_item *)
let mkstr d =
  { pstr_desc = d; pstr_loc = symbol_rloc() }
  
(* mkinfix : expression -> string -> expression -> expression  *)
let mkinfix arg1 name arg2 =
     mkexp(Pexp_apply(
	          {pexp_desc = Pexp_ident(Lident name);
			   pexp_loc = rhs_loc 2 }, [arg1;arg2]))
(* mkuminus : string -> expression -> expression *)
let mkuminus op expr = 
  match op, expr.pexp_desc with
  | "-", Pexp_constant(Const_int n) ->
      mkexp(Pexp_constant(Const_int(-n)))
  | "-" , Pexp_constant(Const_float f) ->
      mkexp(Pexp_constant(Const_float ("-" ^ f)))
  | "-." , Pexp_constant(Const_float f) ->
      mkexp(Pexp_constant(Const_float ("-" ^ f)))
  | _, _ ->
      mkexp(Pexp_apply({pexp_desc = Pexp_ident(Lident ("~"^op)); pexp_loc = rhs_loc 1} , [expr]))
(*  | _ , _ -> raise_error "unknown uminus"  *)
 
(* mklistpat : pattern list -> pattern 
   To make 'list' pattern by using construct and tuple  *)
let rec mklistpat plist = 
  match plist with
    [] -> mkpat(Ppat_construct(Lident "[]", None))
  | hpat::tpat -> 
      let tlist = mklistpat tpat in
	  let loc = {loc_start = hpat.ppat_loc.loc_start;
	             loc_end = tlist.ppat_loc.loc_end; }
	  in
	  let tuple_pat = {ppat_desc = Ppat_tuple [hpat; tlist]; ppat_loc = loc} in
	  {ppat_desc = Ppat_construct(Lident "::", Some tuple_pat); ppat_loc = loc}            
(* mklistexp : expression list -> expression 
   To make 'list' expression by using construct and tuple *)
let rec mklistexp elist =
  match elist with
    [] -> mkexp(Pexp_construct(Lident "[]", None))
  | hexp::texp ->
      let tlist = mklistexp texp in
	  let loc = {loc_start = hexp.pexp_loc.loc_start;
	             loc_end = tlist.pexp_loc.loc_end; }
	  in
	  let tuple_exp = {pexp_desc = Pexp_tuple [hexp; tlist]; pexp_loc =loc} in
	  {pexp_desc = Pexp_construct(Lident "::", Some tuple_exp); pexp_loc = loc}


# 182 "parser.ml"
let yytransl_const = [|
  257 (* AMPERAMPER *);
  258 (* AMPERSAND *);
  259 (* AND *);
  260 (* AS *);
  261 (* ASSERT *);
  262 (* BACKQUOTE *);
  263 (* BAR *);
  264 (* BARBAR *);
  265 (* BARRBRACKET *);
  266 (* BEGIN *);
  268 (* CLASS *);
  269 (* COLON *);
  270 (* COLONCOLON *);
  271 (* COLONEQUAL *);
  272 (* COLONGREATER *);
  273 (* COMMA *);
  274 (* CONSTRAINT *);
  275 (* DO *);
  276 (* DONE *);
  277 (* DOT *);
  278 (* DOTDOT *);
  279 (* DOWNTO *);
  280 (* ELSE *);
  281 (* END *);
    0 (* EOF *);
  282 (* EQUAL *);
  283 (* EXCEPTION *);
  284 (* EXTERNAL *);
  285 (* FALSE *);
  287 (* FOR *);
  288 (* FUN *);
  289 (* FUNCTION *);
  290 (* FUNCTOR *);
  291 (* GREATER *);
  292 (* GREATERRBRACE *);
  293 (* GREATERRBRACKET *);
  294 (* IF *);
  295 (* IN *);
  296 (* INCLUDE *);
  302 (* INHERIT *);
  303 (* INITIALIZER *);
  308 (* LAZY *);
  309 (* LBRACE *);
  310 (* LBRACELESS *);
  311 (* LBRACKET *);
  312 (* LBRACKETBAR *);
  313 (* LBRACKETLESS *);
  314 (* LBRACKETGREATER *);
  315 (* LESS *);
  316 (* LESSMINUS *);
  317 (* LET *);
  319 (* LPAREN *);
  320 (* MATCH *);
  321 (* METHOD *);
  322 (* MINUS *);
  323 (* MINUSDOT *);
  324 (* MINUSGREATER *);
  325 (* MODULE *);
  326 (* MUTABLE *);
  328 (* NEW *);
  329 (* OBJECT *);
  330 (* OF *);
  331 (* OPEN *);
  333 (* OR *);
  334 (* PLUS *);
  336 (* PRIVATE *);
  337 (* QUESTION *);
  338 (* QUESTIONQUESTION *);
  339 (* QUOTE *);
  340 (* RBRACE *);
  341 (* RBRACKET *);
  342 (* REC *);
  343 (* RPAREN *);
  344 (* SEMI *);
  345 (* SEMISEMI *);
  346 (* SHARP *);
  347 (* SIG *);
  348 (* STAR *);
  350 (* STRUCT *);
  351 (* THEN *);
  352 (* TILDE *);
  353 (* TO *);
  354 (* TRUE *);
  355 (* TRY *);
  356 (* TYPE *);
  358 (* UNDERSCORE *);
  359 (* VAL *);
  360 (* VIRTUAL *);
  361 (* WHEN *);
  362 (* WHILE *);
  363 (* WITH *);
    0|]

let yytransl_block = [|
  267 (* CHAR *);
  286 (* FLOAT *);
  297 (* INFIXOP0 *);
  298 (* INFIXOP1 *);
  299 (* INFIXOP2 *);
  300 (* INFIXOP3 *);
  301 (* INFIXOP4 *);
  304 (* INT *);
  305 (* INT32 *);
  306 (* INT64 *);
  307 (* LABEL *);
  318 (* LIDENT *);
  327 (* NATIVEINT *);
  332 (* OPTLABEL *);
  335 (* PREFIXOP *);
  349 (* STRING *);
  357 (* UIDENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\005\000\005\000\005\000\005\000\004\000\004\000\004\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\013\000\013\000\007\000\007\000\025\000\025\000\
\027\000\027\000\029\000\029\000\015\000\015\000\017\000\017\000\
\031\000\018\000\018\000\023\000\023\000\030\000\030\000\028\000\
\028\000\028\000\028\000\028\000\028\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\033\000\
\033\000\035\000\035\000\008\000\008\000\036\000\038\000\038\000\
\038\000\038\000\037\000\037\000\037\000\041\000\042\000\042\000\
\039\000\039\000\044\000\009\000\009\000\032\000\047\000\047\000\
\049\000\049\000\050\000\050\000\050\000\050\000\050\000\048\000\
\048\000\051\000\051\000\046\000\046\000\022\000\022\000\022\000\
\022\000\034\000\034\000\034\000\043\000\043\000\026\000\026\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\045\000\045\000\045\000\045\000\045\000\021\000\
\021\000\019\000\019\000\019\000\019\000\019\000\052\000\052\000\
\010\000\010\000\054\000\054\000\006\000\006\000\040\000\040\000\
\014\000\014\000\024\000\024\000\020\000\020\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\000\000\001\000\003\000\003\000\002\000\
\003\000\002\000\003\000\002\000\001\000\002\000\003\000\001\000\
\002\000\005\000\003\000\003\000\005\000\005\000\004\000\001\000\
\002\000\006\000\004\000\003\000\008\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\001\000\
\001\000\001\000\003\000\003\000\003\000\002\000\003\000\004\000\
\004\000\002\000\001\000\002\000\001\000\003\000\002\000\003\000\
\001\000\003\000\002\000\002\000\002\000\004\000\001\000\002\000\
\002\000\003\000\003\000\001\000\003\000\002\000\002\000\001\000\
\003\000\001\000\002\000\003\000\003\000\001\000\001\000\001\000\
\001\000\004\000\004\000\003\000\003\000\005\000\005\000\003\000\
\003\000\001\000\003\000\001\000\003\000\003\000\000\000\002\000\
\002\000\004\000\000\000\001\000\003\000\002\000\001\000\003\000\
\001\000\003\000\002\000\000\000\002\000\001\000\001\000\003\000\
\001\000\003\000\002\000\001\000\001\000\002\000\004\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\002\000\002\000\001\000\001\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\001\000\001\000\001\000\001\000\
\003\000\001\000\002\000\002\000\001\000\001\000\001\000\003\000\
\001\000\003\000\001\000\003\000\000\000\001\000\000\000\001\000\
\000\000\001\000\000\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\135\000\000\000\173\000\137\000\000\000\
\000\000\000\000\134\000\000\000\000\000\143\000\000\000\000\000\
\189\000\190\000\000\000\000\000\000\000\136\000\174\000\000\000\
\000\000\177\000\191\000\000\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\049\000\168\000\
\054\000\000\000\000\000\000\000\000\000\000\000\000\000\087\000\
\000\000\000\000\089\000\138\000\086\000\088\000\186\000\000\000\
\000\000\171\000\000\000\000\000\182\000\000\000\161\000\160\000\
\159\000\000\000\162\000\155\000\157\000\146\000\147\000\148\000\
\149\000\150\000\156\000\000\000\000\000\158\000\151\000\000\000\
\172\000\154\000\000\000\000\000\000\000\000\000\000\000\058\000\
\050\000\000\000\000\000\000\000\000\000\000\000\000\000\100\000\
\000\000\108\000\001\000\000\000\003\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\000\000\000\025\000\047\000\
\000\000\055\000\053\000\000\000\011\000\080\000\000\000\000\000\
\000\000\000\000\000\000\153\000\145\000\000\000\140\000\139\000\
\000\000\000\000\000\000\020\000\071\000\000\000\000\000\000\000\
\000\000\000\000\000\000\061\000\000\000\000\000\000\000\052\000\
\051\000\144\000\000\000\006\000\007\000\000\000\111\000\000\000\
\142\000\141\000\110\000\000\000\000\000\000\000\000\000\178\000\
\169\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\000\000\060\000\000\000\000\000\
\175\000\000\000\000\000\179\000\124\000\000\000\132\000\000\000\
\125\000\000\000\083\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\093\000\000\000\092\000\073\000\072\000\000\000\
\069\000\000\000\000\000\057\000\056\000\000\000\000\000\000\000\
\000\000\000\000\063\000\065\000\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\109\000\101\000\000\000\102\000\000\000\
\152\000\130\000\000\000\119\000\000\000\000\000\123\000\000\000\
\126\000\000\000\081\000\000\000\000\000\000\000\000\000\000\000\
\091\000\090\000\000\000\000\000\000\000\062\000\018\000\079\000\
\078\000\067\000\068\000\000\000\064\000\000\000\000\000\000\000\
\112\000\165\000\166\000\000\000\184\000\167\000\000\000\104\000\
\000\000\000\000\113\000\000\000\000\000\000\000\000\000\000\000\
\133\000\176\000\180\000\095\000\094\000\070\000\000\000\066\000\
\000\000\164\000\000\000\000\000\115\000\000\000\000\000\131\000\
\127\000\000\000\000\000\163\000\114\000\000\000\029\000"

let yydgoto = "\002\000\
\027\000\028\000\029\000\083\000\031\000\062\000\155\000\095\000\
\133\000\032\000\033\000\034\000\125\000\056\000\150\000\134\000\
\148\000\035\000\036\000\037\000\038\000\039\000\060\000\154\000\
\156\000\040\000\235\000\158\000\236\000\237\000\149\000\250\000\
\137\000\054\000\138\000\096\000\097\000\247\000\033\001\034\001\
\098\000\168\000\171\000\035\001\036\001\206\000\251\000\252\000\
\253\000\208\000\254\000\209\000\084\000\210\000"

let yysindex = "\028\000\
\119\011\000\000\225\011\000\000\189\254\000\000\000\000\015\006\
\065\255\161\012\000\000\017\012\209\254\000\000\003\011\161\012\
\000\000\000\000\212\254\188\001\177\011\000\000\000\000\161\012\
\089\255\000\000\000\000\081\000\000\000\161\255\161\255\070\255\
\229\012\188\001\085\255\188\001\161\012\000\000\000\000\000\000\
\000\000\209\254\026\255\095\255\175\005\185\010\253\254\000\000\
\108\255\111\006\000\000\000\000\000\000\000\000\000\000\015\006\
\080\255\000\000\065\013\093\255\000\000\015\006\000\000\000\000\
\000\000\099\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\188\001\
\000\000\000\000\014\255\103\255\084\255\108\255\077\011\000\000\
\000\000\161\255\161\255\086\255\109\255\217\254\194\255\000\000\
\138\255\000\000\000\000\209\254\000\000\000\000\105\255\161\012\
\161\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012\
\161\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012\
\161\012\161\012\161\012\188\001\000\000\161\012\000\000\000\000\
\015\006\000\000\000\000\206\000\000\000\000\000\015\006\067\000\
\184\255\114\255\253\254\000\000\000\000\060\255\000\000\000\000\
\106\255\161\012\111\006\000\000\000\000\212\255\201\255\161\012\
\161\012\063\255\032\255\000\000\132\255\108\000\157\255\000\000\
\000\000\000\000\065\255\000\000\000\000\069\255\000\000\019\255\
\000\000\000\000\000\000\089\255\197\255\015\006\221\009\000\000\
\000\000\057\010\057\010\195\013\023\005\065\013\195\013\233\004\
\233\004\233\004\233\004\220\254\179\255\179\255\233\004\220\254\
\220\254\195\013\220\254\000\000\179\255\000\000\195\013\032\255\
\000\000\206\000\217\254\000\000\000\000\134\255\000\000\225\254\
\000\000\211\255\000\000\121\255\015\006\015\006\015\006\015\006\
\015\006\068\255\000\000\206\000\000\000\000\000\000\000\015\006\
\000\000\011\013\065\013\000\000\000\000\015\006\161\012\003\255\
\161\012\132\255\000\000\000\000\209\255\161\012\161\012\015\006\
\000\000\015\006\109\255\000\000\000\000\227\255\000\000\235\255\
\000\000\000\000\176\255\000\000\154\255\072\255\000\000\206\000\
\000\000\243\254\000\000\160\255\234\255\234\255\234\255\067\000\
\000\000\000\000\020\255\201\255\161\012\000\000\000\000\000\000\
\000\000\000\000\000\000\161\012\000\000\103\013\212\255\212\255\
\000\000\000\000\000\000\102\255\000\000\000\000\000\000\000\000\
\242\255\003\000\000\000\095\255\206\000\206\000\206\000\225\254\
\000\000\000\000\000\000\000\000\000\000\000\000\065\013\000\000\
\161\012\000\000\248\254\248\254\000\000\176\255\134\255\000\000\
\000\000\157\013\183\255\000\000\000\000\242\255\000\000"

let yyrindex = "\000\000\
\007\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\191\009\000\000\000\000\000\000\124\013\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\019\001\000\000\000\000\000\000\
\217\255\000\000\000\000\000\000\000\000\007\001\007\001\001\000\
\094\009\103\000\135\001\199\000\000\000\000\000\000\000\000\000\
\000\000\124\013\000\000\178\000\000\000\000\000\000\000\000\000\
\104\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\255\075\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\012\113\012\000\000\000\000\204\255\
\000\000\000\000\000\000\000\000\000\000\032\001\000\000\000\000\
\000\000\007\001\007\001\000\000\000\000\000\000\016\002\000\000\
\000\000\000\000\000\000\124\013\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\004\000\000\039\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\223\002\052\255\
\065\003\075\255\207\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\231\001\000\000\000\000\
\078\255\000\000\072\002\000\000\149\000\000\000\000\000\000\000\
\000\000\000\000\191\009\000\000\000\000\191\009\000\000\000\000\
\000\000\000\000\000\000\217\255\082\000\000\000\000\000\000\000\
\000\000\015\008\081\008\111\008\007\006\249\008\140\008\103\006\
\199\006\039\007\135\007\135\004\071\002\167\002\231\007\231\004\
\071\005\180\008\167\005\000\000\007\003\000\000\209\008\000\000\
\000\000\000\000\000\000\000\000\000\000\179\001\000\000\239\006\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\078\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\058\006\054\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\000\000\000\072\002\
\000\000\000\000\133\000\000\000\097\000\000\000\000\000\000\000\
\000\000\000\000\000\000\161\003\011\255\095\004\140\004\061\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\103\003\199\003\
\000\000\000\000\000\000\000\000\000\000\000\000\083\001\000\000\
\029\002\000\000\000\000\019\002\000\000\000\000\000\000\175\007\
\000\000\000\000\000\000\000\000\000\000\000\000\059\009\000\000\
\000\000\000\000\000\000\000\000\000\000\229\000\099\009\000\000\
\000\000\023\255\000\000\000\000\000\000\125\002\000\000"

let yygindex = "\000\000\
\000\000\000\000\186\000\009\000\020\001\236\255\140\255\000\000\
\011\000\187\010\004\000\012\000\180\000\013\000\101\255\250\255\
\159\000\000\000\095\010\000\000\000\000\061\010\000\000\170\000\
\083\000\253\255\077\000\038\000\000\000\000\000\122\255\206\255\
\000\000\000\000\000\000\142\000\000\000\000\000\007\000\000\000\
\163\255\000\000\114\000\014\000\000\000\032\000\029\000\000\000\
\128\255\000\000\000\000\055\255\000\000\000\000"

let yytablesize = 3871
let yytable = "\167\000\
\170\000\050\000\016\001\207\000\053\000\026\001\001\001\115\000\
\116\000\030\000\084\000\043\000\200\000\160\000\084\000\059\000\
\225\000\084\000\057\000\044\001\027\001\129\000\169\000\084\000\
\085\000\130\000\143\000\084\000\001\000\090\000\201\000\088\000\
\092\000\044\000\230\000\243\000\084\000\075\000\061\000\075\000\
\128\000\053\000\053\000\147\000\144\000\124\000\053\000\127\000\
\042\001\076\000\131\000\098\000\053\000\077\000\059\001\123\000\
\026\000\248\000\157\000\219\000\099\000\170\000\228\000\212\000\
\201\000\202\000\213\000\009\001\241\000\204\000\231\000\055\000\
\220\000\214\000\187\000\055\000\215\000\188\000\084\000\174\000\
\099\000\103\000\136\000\142\000\023\001\203\000\024\001\043\001\
\039\001\030\001\103\000\088\000\060\001\151\000\057\001\084\000\
\128\000\084\000\084\000\177\000\161\000\126\000\016\000\204\000\
\205\000\244\000\045\001\178\000\179\000\180\000\181\000\182\000\
\183\000\184\000\185\000\186\000\187\000\188\000\189\000\190\000\
\191\000\192\000\193\000\194\000\195\000\157\000\197\000\041\001\
\145\000\199\000\196\000\053\000\118\000\046\001\076\000\124\000\
\098\000\076\000\077\000\098\000\147\000\077\000\004\000\053\000\
\232\000\099\000\221\000\229\000\099\000\025\001\234\000\093\000\
\010\001\053\000\222\000\226\000\227\000\233\000\040\001\187\000\
\006\000\007\000\188\000\201\000\202\000\207\000\014\000\175\000\
\132\000\011\001\157\000\094\000\211\000\214\000\152\000\240\000\
\215\000\116\000\242\000\011\000\153\000\017\001\014\000\175\000\
\203\000\159\000\045\000\005\000\050\001\162\000\163\000\094\000\
\166\000\014\000\046\000\032\001\172\000\047\000\050\000\173\000\
\216\000\217\000\204\000\205\000\212\000\176\000\176\000\213\000\
\003\001\053\000\053\000\053\000\053\000\053\000\214\000\101\000\
\102\000\215\000\224\000\239\000\053\000\100\000\246\000\116\000\
\022\000\000\001\157\000\234\000\120\000\023\000\053\000\002\001\
\026\000\048\000\020\001\019\000\053\000\230\000\053\000\015\001\
\026\001\018\001\022\001\037\001\056\001\038\001\021\001\214\000\
\051\001\021\000\004\001\005\001\006\001\007\001\008\001\027\001\
\170\000\170\000\170\000\170\000\025\000\012\001\004\000\170\000\
\170\000\052\001\170\000\170\000\146\000\050\001\170\000\170\000\
\047\001\170\000\005\000\164\000\165\000\151\000\107\000\151\000\
\170\000\170\000\170\000\170\000\048\001\170\000\170\000\012\000\
\201\000\028\001\145\000\170\000\183\000\152\000\059\000\170\000\
\091\000\170\000\170\000\170\000\170\000\170\000\053\001\198\000\
\170\000\223\000\029\001\218\000\058\001\203\000\019\001\170\000\
\014\001\245\000\062\001\170\000\255\000\170\000\170\000\170\000\
\061\001\054\001\170\000\170\000\030\001\055\001\212\000\031\001\
\205\000\213\000\000\000\170\000\000\000\170\000\170\000\170\000\
\214\000\000\000\163\000\215\000\103\000\170\000\000\000\170\000\
\170\000\170\000\000\000\000\000\170\000\170\000\000\000\170\000\
\128\000\000\000\170\000\128\000\170\000\170\000\016\000\016\000\
\016\000\016\000\000\000\170\000\103\000\016\000\016\000\212\000\
\000\000\128\000\213\000\000\000\016\000\016\000\000\000\016\000\
\000\000\214\000\128\000\128\000\215\000\000\000\016\000\016\000\
\016\000\016\000\000\000\000\000\118\000\238\000\024\000\118\000\
\000\000\016\000\000\000\000\000\000\000\016\000\103\000\016\000\
\016\000\016\000\016\000\016\000\000\000\118\000\000\000\000\000\
\086\000\000\000\000\000\086\000\103\000\128\000\118\000\118\000\
\000\000\016\000\086\000\016\000\128\000\086\000\000\000\000\000\
\016\000\016\000\103\000\128\000\000\000\000\000\000\000\000\000\
\000\000\016\000\117\000\016\000\016\000\103\000\000\000\128\000\
\000\000\128\000\000\000\016\000\000\000\016\000\016\000\016\000\
\000\000\118\000\016\000\000\000\128\000\016\000\050\000\050\000\
\050\000\050\000\016\000\000\000\116\000\050\000\050\000\118\000\
\000\000\016\000\000\000\000\000\050\000\050\000\000\000\050\000\
\000\000\000\000\000\000\118\000\000\000\118\000\050\000\050\000\
\050\000\050\000\000\000\000\000\120\000\000\000\019\000\120\000\
\118\000\050\000\000\000\000\000\000\000\050\000\116\000\050\000\
\050\000\050\000\050\000\050\000\000\000\120\000\000\000\000\000\
\000\000\000\000\000\000\000\000\116\000\000\000\120\000\120\000\
\000\000\050\000\000\000\050\000\000\000\000\000\000\000\000\000\
\050\000\050\000\116\000\201\000\202\000\000\000\000\000\010\000\
\000\000\050\000\116\000\050\000\050\000\116\000\000\000\000\000\
\000\000\000\000\000\000\050\000\105\000\050\000\050\000\050\000\
\203\000\120\000\050\000\000\000\000\000\050\000\059\000\059\000\
\059\000\059\000\050\000\000\000\000\000\059\000\059\000\120\000\
\000\000\050\000\204\000\205\000\059\000\059\000\000\000\059\000\
\000\000\000\000\012\000\120\000\000\000\120\000\059\000\059\000\
\059\000\059\000\000\000\000\000\000\000\000\000\033\000\009\000\
\120\000\059\000\000\000\000\000\000\000\059\000\000\000\059\000\
\059\000\059\000\059\000\059\000\000\000\163\000\000\000\000\000\
\000\000\163\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\059\000\000\000\059\000\000\000\000\000\000\000\179\000\
\059\000\059\000\012\000\000\000\000\000\163\000\000\000\000\000\
\000\000\059\000\000\000\059\000\059\000\000\000\000\000\000\000\
\012\000\000\000\000\000\059\000\106\000\059\000\059\000\059\000\
\000\000\000\000\059\000\012\000\000\000\059\000\024\000\024\000\
\024\000\024\000\059\000\000\000\000\000\024\000\024\000\163\000\
\000\000\059\000\000\000\000\000\024\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\163\000\163\000\024\000\024\000\
\024\000\024\000\000\000\000\000\000\000\000\000\034\000\000\000\
\000\000\024\000\000\000\163\000\000\000\024\000\000\000\024\000\
\024\000\024\000\024\000\024\000\000\000\117\000\163\000\000\000\
\000\000\117\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\024\000\000\000\003\000\004\000\000\000\
\024\000\024\000\000\000\000\000\000\000\117\000\000\000\000\000\
\000\000\024\000\000\000\024\000\024\000\000\000\000\000\000\000\
\006\000\007\000\000\000\024\000\000\000\024\000\024\000\024\000\
\000\000\000\000\024\000\000\000\000\000\024\000\019\000\019\000\
\019\000\019\000\024\000\011\000\000\000\000\000\019\000\117\000\
\000\000\024\000\012\000\000\000\019\000\019\000\000\000\019\000\
\000\000\014\000\087\000\000\000\000\000\117\000\019\000\019\000\
\019\000\019\000\000\000\000\000\000\000\000\000\038\000\000\000\
\000\000\019\000\020\000\117\000\000\000\019\000\000\000\019\000\
\019\000\019\000\019\000\019\000\000\000\116\000\117\000\000\000\
\022\000\116\000\000\000\000\000\000\000\023\000\000\000\105\000\
\026\000\019\000\000\000\019\000\000\000\000\000\000\000\000\000\
\019\000\019\000\010\000\000\000\000\000\116\000\000\000\000\000\
\000\000\019\000\000\000\019\000\019\000\000\000\000\000\105\000\
\000\000\000\000\000\000\019\000\000\000\019\000\019\000\019\000\
\000\000\000\000\019\000\000\000\000\000\019\000\033\000\033\000\
\033\000\033\000\019\000\000\000\010\000\033\000\033\000\116\000\
\000\000\019\000\000\000\000\000\033\000\033\000\000\000\033\000\
\000\000\105\000\010\000\000\000\000\000\116\000\033\000\033\000\
\033\000\033\000\009\000\000\000\000\000\000\000\021\000\105\000\
\010\000\033\000\000\000\116\000\000\000\033\000\000\000\033\000\
\033\000\033\000\033\000\010\000\000\000\105\000\116\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\106\000\
\105\000\033\000\000\000\033\000\009\000\000\000\000\000\000\000\
\033\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\009\000\033\000\033\000\000\000\000\000\106\000\
\000\000\000\000\000\000\033\000\000\000\033\000\033\000\033\000\
\009\000\000\000\033\000\000\000\000\000\033\000\034\000\034\000\
\034\000\034\000\033\000\009\000\000\000\034\000\034\000\000\000\
\000\000\033\000\000\000\000\000\034\000\034\000\000\000\034\000\
\000\000\106\000\000\000\000\000\000\000\000\000\034\000\034\000\
\034\000\034\000\000\000\000\000\000\000\000\000\022\000\106\000\
\000\000\034\000\000\000\000\000\000\000\034\000\000\000\034\000\
\034\000\034\000\034\000\000\000\000\000\106\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\089\000\000\000\
\106\000\034\000\089\000\034\000\000\000\089\000\000\000\000\000\
\034\000\034\000\000\000\089\000\089\000\000\000\000\000\089\000\
\000\000\034\000\000\000\034\000\034\000\000\000\000\000\000\000\
\089\000\000\000\000\000\034\000\000\000\034\000\034\000\034\000\
\000\000\000\000\034\000\000\000\000\000\034\000\038\000\038\000\
\038\000\038\000\034\000\000\000\000\000\038\000\038\000\000\000\
\000\000\034\000\000\000\000\000\038\000\038\000\000\000\038\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\038\000\
\038\000\038\000\089\000\000\000\000\000\000\000\014\000\000\000\
\000\000\038\000\000\000\000\000\000\000\038\000\000\000\038\000\
\038\000\038\000\038\000\089\000\000\000\089\000\089\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\000\038\000\000\000\038\000\082\000\000\000\000\000\082\000\
\038\000\038\000\000\000\000\000\000\000\082\000\082\000\000\000\
\000\000\038\000\000\000\038\000\038\000\000\000\000\000\000\000\
\000\000\000\000\082\000\038\000\000\000\038\000\038\000\038\000\
\000\000\000\000\038\000\000\000\000\000\038\000\021\000\021\000\
\021\000\021\000\038\000\000\000\000\000\000\000\021\000\000\000\
\000\000\038\000\000\000\000\000\021\000\021\000\000\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\021\000\
\021\000\021\000\000\000\000\000\082\000\000\000\032\000\000\000\
\000\000\021\000\000\000\000\000\000\000\021\000\000\000\021\000\
\021\000\021\000\021\000\021\000\000\000\082\000\000\000\082\000\
\082\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\000\021\000\000\000\021\000\085\000\000\000\000\000\085\000\
\021\000\021\000\000\000\000\000\000\000\085\000\000\000\000\000\
\000\000\021\000\000\000\021\000\021\000\000\000\000\000\000\000\
\000\000\000\000\085\000\021\000\000\000\021\000\021\000\021\000\
\000\000\000\000\021\000\000\000\000\000\021\000\022\000\022\000\
\022\000\022\000\021\000\000\000\000\000\000\000\022\000\000\000\
\000\000\021\000\000\000\000\000\022\000\022\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\022\000\
\022\000\022\000\000\000\000\000\085\000\000\000\036\000\000\000\
\000\000\022\000\000\000\000\000\000\000\022\000\000\000\022\000\
\022\000\022\000\022\000\022\000\000\000\085\000\000\000\085\000\
\085\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\000\000\022\000\000\000\000\000\000\000\000\000\
\022\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\000\000\022\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\000\000\022\000\022\000\022\000\
\000\000\000\000\022\000\000\000\000\000\022\000\014\000\014\000\
\014\000\014\000\022\000\000\000\000\000\014\000\014\000\000\000\
\000\000\022\000\000\000\000\000\014\000\014\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\014\000\
\014\000\014\000\000\000\000\000\000\000\000\000\037\000\000\000\
\000\000\014\000\000\000\000\000\000\000\014\000\000\000\014\000\
\014\000\014\000\014\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\097\000\000\000\
\000\000\014\000\097\000\000\000\000\000\097\000\000\000\000\000\
\000\000\000\000\000\000\097\000\000\000\000\000\000\000\097\000\
\000\000\014\000\000\000\014\000\014\000\000\000\000\000\000\000\
\097\000\000\000\000\000\014\000\000\000\014\000\014\000\014\000\
\000\000\000\000\014\000\000\000\000\000\014\000\032\000\032\000\
\032\000\032\000\014\000\096\000\000\000\032\000\032\000\096\000\
\000\000\014\000\096\000\000\000\032\000\032\000\000\000\032\000\
\096\000\000\000\000\000\000\000\096\000\000\000\032\000\032\000\
\032\000\032\000\097\000\000\000\000\000\096\000\035\000\000\000\
\000\000\032\000\000\000\000\000\000\000\032\000\000\000\032\000\
\032\000\032\000\000\000\097\000\000\000\097\000\097\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\000\000\032\000\000\000\000\000\000\000\000\000\
\032\000\032\000\000\000\000\000\000\000\000\000\000\000\096\000\
\000\000\032\000\000\000\032\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\032\000\000\000\032\000\032\000\032\000\
\096\000\000\000\096\000\096\000\000\000\032\000\036\000\036\000\
\036\000\036\000\032\000\000\000\000\000\036\000\036\000\000\000\
\000\000\032\000\000\000\000\000\036\000\036\000\107\000\036\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\036\000\
\036\000\036\000\000\000\000\000\000\000\000\000\028\000\000\000\
\000\000\036\000\000\000\000\000\000\000\036\000\000\000\036\000\
\036\000\036\000\113\000\114\000\115\000\116\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\000\000\000\036\000\107\000\000\000\000\000\000\000\
\036\000\036\000\118\000\119\000\000\000\000\000\000\000\000\000\
\000\000\036\000\000\000\036\000\036\000\000\000\121\000\000\000\
\000\000\027\000\000\000\036\000\000\000\036\000\036\000\036\000\
\000\000\114\000\115\000\116\000\123\000\036\000\037\000\037\000\
\037\000\037\000\036\000\000\000\000\000\037\000\037\000\000\000\
\000\000\036\000\000\000\000\000\037\000\037\000\000\000\037\000\
\118\000\119\000\000\000\000\000\000\000\000\000\037\000\037\000\
\037\000\037\000\000\000\000\000\121\000\000\000\039\000\000\000\
\000\000\037\000\000\000\000\000\000\000\037\000\000\000\037\000\
\037\000\037\000\123\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\000\000\037\000\000\000\000\000\000\000\000\000\
\037\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\000\000\037\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\037\000\000\000\037\000\037\000\037\000\
\000\000\000\000\000\000\000\000\000\000\037\000\035\000\035\000\
\035\000\035\000\037\000\000\000\000\000\035\000\035\000\000\000\
\000\000\037\000\000\000\000\000\035\000\035\000\000\000\035\000\
\000\000\004\000\000\000\000\000\000\000\000\000\035\000\035\000\
\035\000\035\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\035\000\000\000\006\000\007\000\035\000\000\000\035\000\
\035\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\000\000\035\000\000\000\035\000\000\000\045\000\000\000\000\000\
\035\000\035\000\000\000\000\000\014\000\046\000\121\000\000\000\
\047\000\035\000\000\000\035\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\035\000\000\000\035\000\035\000\035\000\
\000\000\000\000\000\000\058\000\000\000\035\000\028\000\028\000\
\028\000\028\000\035\000\022\000\000\000\028\000\028\000\000\000\
\023\000\035\000\000\000\026\000\048\000\028\000\000\000\028\000\
\000\000\004\000\000\000\000\000\000\000\000\000\028\000\028\000\
\028\000\028\000\000\000\000\000\000\000\000\000\030\000\000\000\
\000\000\028\000\000\000\006\000\007\000\028\000\000\000\028\000\
\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\000\000\000\000\000\027\000\000\000\011\000\000\000\
\027\000\028\000\000\000\028\000\000\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\046\000\000\000\000\000\
\047\000\028\000\027\000\028\000\027\000\000\000\000\000\000\000\
\000\000\000\000\000\000\028\000\000\000\028\000\028\000\028\000\
\027\000\000\000\000\000\000\000\000\000\028\000\039\000\039\000\
\039\000\039\000\028\000\022\000\000\000\039\000\039\000\000\000\
\023\000\028\000\000\000\026\000\048\000\039\000\027\000\039\000\
\000\000\004\000\000\000\000\000\000\000\000\000\039\000\039\000\
\039\000\039\000\000\000\000\000\027\000\000\000\031\000\000\000\
\000\000\039\000\000\000\006\000\007\000\039\000\027\000\039\000\
\027\000\027\000\027\000\000\000\000\000\000\000\000\000\000\000\
\027\000\000\000\000\000\000\000\000\000\027\000\011\000\000\000\
\000\000\039\000\000\000\039\000\027\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\046\000\122\000\000\000\
\047\000\039\000\146\000\039\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\000\000\039\000\039\000\039\000\
\000\000\000\000\000\000\000\000\000\000\039\000\041\000\041\000\
\041\000\041\000\039\000\022\000\000\000\041\000\041\000\000\000\
\023\000\039\000\000\000\026\000\048\000\041\000\000\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\041\000\
\041\000\041\000\000\000\000\000\000\000\000\000\040\000\000\000\
\000\000\041\000\000\000\000\000\000\000\041\000\121\000\041\000\
\000\000\121\000\000\000\000\000\000\000\121\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\121\000\
\000\000\041\000\000\000\041\000\000\000\000\000\000\000\000\000\
\121\000\121\000\000\000\000\000\000\000\000\000\045\000\000\000\
\000\000\041\000\000\000\041\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\000\000\000\041\000\041\000\041\000\
\000\000\000\000\000\000\000\000\000\000\041\000\030\000\030\000\
\030\000\030\000\041\000\121\000\000\000\030\000\030\000\000\000\
\000\000\041\000\121\000\000\000\000\000\030\000\000\000\030\000\
\000\000\121\000\000\000\000\000\000\000\000\000\030\000\030\000\
\030\000\030\000\000\000\000\000\000\000\121\000\000\000\121\000\
\000\000\030\000\121\000\000\000\000\000\030\000\000\000\030\000\
\044\000\000\000\121\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\000\000\000\030\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\000\000\
\000\000\030\000\000\000\030\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\030\000\000\000\030\000\030\000\030\000\
\000\000\000\000\000\000\000\000\000\000\030\000\031\000\031\000\
\031\000\031\000\030\000\075\000\000\000\031\000\031\000\000\000\
\000\000\030\000\000\000\000\000\000\000\031\000\000\000\031\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\031\000\
\031\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\031\000\000\000\000\000\000\000\031\000\122\000\031\000\
\000\000\122\000\000\000\042\000\000\000\122\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\122\000\
\000\000\031\000\000\000\031\000\000\000\000\000\000\000\000\000\
\122\000\122\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\031\000\000\000\031\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\000\000\000\031\000\031\000\031\000\
\000\000\000\000\000\000\000\000\000\000\031\000\040\000\040\000\
\040\000\040\000\031\000\122\000\000\000\040\000\040\000\000\000\
\000\000\031\000\122\000\000\000\000\000\040\000\000\000\040\000\
\046\000\122\000\000\000\000\000\000\000\000\000\040\000\040\000\
\040\000\040\000\000\000\000\000\000\000\122\000\000\000\122\000\
\000\000\040\000\122\000\000\000\000\000\040\000\045\000\040\000\
\000\000\045\000\122\000\000\000\000\000\045\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\000\000\045\000\
\000\000\040\000\000\000\040\000\000\000\000\000\045\000\045\000\
\000\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\000\000\000\040\000\000\000\045\000\000\000\000\000\
\000\000\000\000\026\000\040\000\000\000\040\000\040\000\040\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\000\000\040\000\045\000\000\000\000\000\000\000\000\000\
\044\000\040\000\000\000\044\000\000\000\000\000\000\000\044\000\
\044\000\045\000\000\000\045\000\000\000\013\000\000\000\044\000\
\000\000\044\000\129\000\045\000\000\000\045\000\045\000\045\000\
\044\000\044\000\000\000\044\000\000\000\045\000\043\000\000\000\
\000\000\043\000\045\000\000\000\000\000\043\000\000\000\044\000\
\000\000\045\000\000\000\000\000\000\000\043\000\000\000\043\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\043\000\
\000\000\043\000\000\000\075\000\000\000\044\000\075\000\000\000\
\000\000\000\000\075\000\000\000\000\000\043\000\000\000\000\000\
\000\000\000\000\075\000\044\000\075\000\044\000\000\000\000\000\
\000\000\000\000\000\000\075\000\075\000\044\000\075\000\044\000\
\044\000\044\000\000\000\043\000\000\000\000\000\000\000\044\000\
\000\000\000\000\075\000\042\000\044\000\000\000\042\000\000\000\
\000\000\043\000\042\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\043\000\042\000\043\000\043\000\043\000\
\075\000\000\000\000\000\042\000\042\000\043\000\042\000\000\000\
\074\000\000\000\043\000\074\000\000\000\000\000\075\000\074\000\
\000\000\043\000\042\000\000\000\000\000\000\000\000\000\074\000\
\075\000\074\000\075\000\075\000\075\000\000\000\000\000\000\000\
\074\000\074\000\075\000\074\000\000\000\000\000\000\000\075\000\
\042\000\000\000\000\000\000\000\000\000\000\000\075\000\074\000\
\046\000\000\000\000\000\046\000\000\000\000\000\042\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\000\000\042\000\042\000\042\000\074\000\000\000\000\000\
\046\000\046\000\042\000\046\000\000\000\000\000\000\000\042\000\
\000\000\000\000\000\000\074\000\000\000\000\000\042\000\046\000\
\000\000\000\000\000\000\000\000\000\000\074\000\000\000\074\000\
\074\000\074\000\000\000\000\000\000\000\000\000\000\000\074\000\
\000\000\000\000\000\000\000\000\074\000\046\000\000\000\000\000\
\000\000\000\000\026\000\074\000\000\000\026\000\000\000\000\000\
\000\000\026\000\000\000\046\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\046\000\
\046\000\046\000\026\000\026\000\000\000\026\000\000\000\046\000\
\000\000\000\000\000\000\000\000\046\000\013\000\000\000\000\000\
\013\000\026\000\129\000\046\000\013\000\129\000\051\000\000\000\
\000\000\052\000\052\000\000\000\000\000\000\000\052\000\000\000\
\000\000\000\000\089\000\129\000\052\000\013\000\013\000\026\000\
\013\000\000\000\052\000\000\000\129\000\129\000\000\000\000\000\
\089\000\000\000\089\000\000\000\013\000\026\000\000\000\000\000\
\000\000\000\000\000\000\135\000\135\000\000\000\000\000\026\000\
\051\000\026\000\026\000\026\000\000\000\000\000\135\000\000\000\
\000\000\026\000\013\000\000\000\135\000\000\000\026\000\129\000\
\000\000\000\000\000\000\000\000\000\000\026\000\129\000\000\000\
\013\000\000\000\000\000\000\000\000\000\129\000\089\000\000\000\
\000\000\000\000\013\000\000\000\013\000\000\000\013\000\000\000\
\000\000\129\000\000\000\129\000\013\000\052\000\000\000\000\000\
\000\000\013\000\049\000\052\000\000\000\000\000\129\000\000\000\
\013\000\185\000\000\000\000\000\000\000\086\000\000\000\052\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\089\000\185\000\185\000\063\000\064\000\135\000\
\000\000\000\000\000\000\000\000\065\000\135\000\000\000\049\000\
\049\000\000\000\052\000\067\000\049\000\000\000\185\000\000\000\
\000\000\051\000\049\000\000\000\000\000\185\000\068\000\000\000\
\049\000\000\000\000\000\051\000\185\000\185\000\000\000\069\000\
\185\000\000\000\000\000\000\000\000\000\070\000\071\000\072\000\
\073\000\074\000\000\000\000\000\135\000\000\000\000\000\000\000\
\000\000\052\000\052\000\052\000\052\000\052\000\000\000\075\000\
\000\000\000\000\000\000\185\000\052\000\000\000\249\000\140\000\
\185\000\000\000\052\000\185\000\185\000\000\000\052\000\000\000\
\000\000\078\000\079\000\141\000\052\000\000\000\052\000\000\000\
\000\000\000\000\000\000\135\000\135\000\135\000\135\000\135\000\
\082\000\104\000\105\000\049\000\000\000\000\000\135\000\000\000\
\000\000\049\000\000\000\000\000\135\000\000\000\107\000\000\000\
\051\000\000\000\000\000\000\000\000\000\049\000\135\000\000\000\
\135\000\000\000\110\000\000\000\000\000\000\000\000\000\049\000\
\000\000\000\000\000\000\111\000\000\000\000\000\000\000\000\000\
\000\000\112\000\113\000\114\000\115\000\116\000\000\000\170\000\
\049\000\000\000\000\000\170\000\000\000\000\000\170\000\000\000\
\000\000\000\000\170\000\117\000\170\000\170\000\000\000\000\000\
\170\000\000\000\118\000\119\000\000\000\000\000\000\000\000\000\
\000\000\170\000\000\000\000\000\170\000\170\000\121\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\123\000\000\000\000\000\170\000\
\000\000\000\000\049\000\000\000\000\000\000\000\170\000\000\000\
\049\000\000\000\000\000\000\000\049\000\170\000\170\000\000\000\
\000\000\170\000\049\000\170\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\064\000\000\000\170\000\000\000\170\000\170\000\
\065\000\000\000\000\000\004\000\170\000\000\000\000\000\067\000\
\000\000\170\000\000\000\000\000\170\000\170\000\000\000\000\000\
\000\000\000\000\068\000\000\000\000\000\006\000\007\000\000\000\
\000\000\000\000\000\000\069\000\000\000\000\000\000\000\000\000\
\000\000\070\000\071\000\072\000\073\000\074\000\000\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\000\000\000\000\000\000\075\000\000\000\000\000\014\000\046\000\
\000\000\000\000\139\000\140\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\064\000\078\000\079\000\141\000\
\000\000\000\000\065\000\000\000\003\000\004\000\000\000\081\000\
\066\000\067\000\000\000\000\000\082\000\022\000\000\000\000\000\
\000\000\000\000\023\000\000\000\068\000\026\000\048\000\006\000\
\007\000\000\000\008\000\009\000\000\000\069\000\000\000\000\000\
\010\000\000\000\000\000\070\000\071\000\072\000\073\000\074\000\
\000\000\000\000\011\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\075\000\000\000\042\000\
\014\000\015\000\016\000\000\000\076\000\077\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\000\064\000\078\000\
\079\000\080\000\000\000\000\000\065\000\000\000\003\000\004\000\
\000\000\081\000\000\000\067\000\000\000\000\000\082\000\022\000\
\000\000\000\000\000\000\000\000\023\000\024\000\068\000\026\000\
\000\000\006\000\007\000\000\000\008\000\009\000\000\000\069\000\
\000\000\000\000\010\000\000\000\000\000\070\000\071\000\072\000\
\073\000\074\000\000\000\000\000\011\000\000\000\000\000\000\000\
\003\000\004\000\000\000\012\000\000\000\000\000\000\000\075\000\
\000\000\042\000\014\000\015\000\016\000\000\000\076\000\077\000\
\000\000\005\000\000\000\006\000\007\000\000\000\008\000\009\000\
\000\000\078\000\079\000\080\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\000\000\000\000\011\000\000\000\
\082\000\022\000\000\000\000\000\000\000\012\000\023\000\024\000\
\000\000\026\000\000\000\013\000\014\000\015\000\016\000\000\000\
\017\000\018\000\003\000\004\000\000\000\000\000\000\000\000\000\
\000\000\019\000\000\000\000\000\000\000\020\000\000\000\000\000\
\000\000\000\000\000\000\005\000\000\000\006\000\007\000\021\000\
\008\000\009\000\000\000\022\000\000\000\000\000\010\000\000\000\
\023\000\024\000\025\000\026\000\000\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
\000\000\000\000\003\000\004\000\000\000\013\000\014\000\015\000\
\016\000\000\000\017\000\018\000\000\000\000\000\000\000\000\000\
\000\000\041\000\000\000\019\000\000\000\006\000\007\000\020\000\
\008\000\009\000\000\000\000\000\000\000\000\000\010\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
\011\000\000\000\023\000\024\000\025\000\026\000\000\000\012\000\
\000\000\000\000\003\000\004\000\000\000\042\000\014\000\015\000\
\016\000\000\000\017\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\007\000\020\000\
\008\000\009\000\000\000\000\000\000\000\000\000\010\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
\011\000\000\000\023\000\024\000\000\000\026\000\000\000\012\000\
\000\000\000\000\189\000\189\000\000\000\042\000\014\000\015\000\
\016\000\000\000\017\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\189\000\189\000\020\000\
\189\000\189\000\000\000\000\000\000\000\058\000\189\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
\189\000\000\000\023\000\024\000\000\000\026\000\000\000\189\000\
\000\000\000\000\190\000\190\000\000\000\189\000\189\000\189\000\
\189\000\000\000\189\000\189\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\190\000\190\000\189\000\
\190\000\190\000\000\000\000\000\000\000\000\000\190\000\152\000\
\000\000\000\000\000\000\000\000\000\000\189\000\000\000\000\000\
\190\000\000\000\189\000\189\000\000\000\189\000\000\000\190\000\
\000\000\000\000\003\000\004\000\000\000\190\000\190\000\190\000\
\190\000\000\000\190\000\190\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\007\000\190\000\
\008\000\009\000\000\000\000\000\000\000\000\000\010\000\153\000\
\000\000\000\000\000\000\000\000\000\000\190\000\000\000\000\000\
\011\000\000\000\190\000\190\000\000\000\190\000\000\000\012\000\
\000\000\000\000\000\000\000\000\000\000\042\000\014\000\015\000\
\016\000\000\000\017\000\018\000\000\000\104\000\105\000\000\000\
\000\000\000\000\000\000\000\000\106\000\000\000\000\000\020\000\
\000\000\000\000\107\000\108\000\000\000\109\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\110\000\000\000\
\000\000\000\000\023\000\024\000\000\000\026\000\000\000\111\000\
\000\000\000\000\000\000\104\000\105\000\112\000\113\000\114\000\
\115\000\116\000\106\000\000\000\000\000\000\000\000\000\000\000\
\107\000\108\000\000\000\109\000\000\000\000\000\000\000\117\000\
\000\000\000\000\013\001\000\000\110\000\000\000\118\000\119\000\
\000\000\000\000\000\000\000\000\000\000\111\000\000\000\000\000\
\000\000\120\000\121\000\112\000\113\000\114\000\115\000\116\000\
\000\000\000\000\000\000\000\000\122\000\000\000\000\000\000\000\
\123\000\104\000\105\000\000\000\000\000\117\000\000\000\000\000\
\106\000\000\000\000\000\000\000\118\000\119\000\107\000\108\000\
\000\000\109\000\000\000\000\000\000\000\000\000\000\000\120\000\
\121\000\000\000\110\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\111\000\000\000\000\000\123\000\104\000\
\105\000\112\000\113\000\114\000\115\000\116\000\106\000\000\000\
\000\000\000\000\000\000\000\000\107\000\108\000\000\000\049\001\
\000\000\000\000\000\000\117\000\000\000\000\000\000\000\000\000\
\110\000\000\000\118\000\119\000\000\000\000\000\181\000\000\000\
\000\000\111\000\000\000\000\000\000\000\120\000\121\000\112\000\
\113\000\114\000\115\000\116\000\000\000\000\000\000\000\000\000\
\181\000\181\000\000\000\000\000\123\000\104\000\105\000\000\000\
\000\000\117\000\000\000\000\000\106\000\000\000\000\000\000\000\
\118\000\119\000\107\000\181\000\000\000\000\000\000\000\000\000\
\000\000\000\000\181\000\120\000\121\000\000\000\110\000\000\000\
\000\000\181\000\181\000\000\000\000\000\181\000\000\000\111\000\
\000\000\000\000\123\000\104\000\105\000\112\000\113\000\114\000\
\115\000\116\000\106\000\000\000\000\000\000\000\000\000\000\000\
\107\000\000\000\000\000\000\000\000\000\000\000\000\000\117\000\
\181\000\000\000\000\000\000\000\110\000\181\000\118\000\119\000\
\181\000\181\000\000\000\000\000\000\000\111\000\000\000\000\000\
\000\000\120\000\121\000\112\000\113\000\114\000\115\000\116\000\
\000\000\000\000\000\000\063\001\000\000\000\000\000\000\000\000\
\123\000\000\000\000\000\000\000\000\000\117\000\000\000\000\000\
\000\000\000\000\000\000\000\000\118\000\119\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\120\000\
\121\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\123\000"

let yycheck = "\093\000\
\000\000\008\000\000\001\132\000\008\000\014\001\208\000\044\001\
\045\001\001\000\000\001\003\000\129\000\000\001\004\001\012\000\
\151\000\007\001\010\000\000\001\029\001\042\000\062\001\013\001\
\016\000\000\001\030\001\017\001\001\000\021\000\062\001\020\000\
\024\000\101\001\003\001\017\001\026\001\015\001\086\001\017\001\
\037\000\045\000\046\000\050\000\048\001\034\000\050\000\036\000\
\062\001\000\001\025\001\000\001\056\000\000\001\063\001\092\001\
\101\001\174\000\062\000\000\001\000\001\101\001\000\001\004\001\
\062\001\063\001\007\001\000\001\000\001\101\001\039\001\007\001\
\013\001\014\001\000\001\007\001\017\001\000\001\068\001\100\000\
\000\000\000\000\045\000\046\000\240\000\083\001\242\000\101\001\
\017\001\098\001\021\001\080\000\101\001\056\000\040\001\085\001\
\000\000\087\001\088\001\103\000\087\001\017\001\000\000\101\001\
\102\001\087\001\087\001\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\115\000\116\000\
\117\000\118\000\119\000\120\000\121\000\129\000\123\000\000\001\
\021\001\126\000\122\000\135\000\000\000\012\001\085\001\124\000\
\085\001\088\001\085\001\088\001\147\000\088\001\011\001\147\000\
\013\001\085\001\087\001\085\001\088\001\243\000\157\000\063\001\
\085\001\157\000\146\000\152\000\153\000\026\001\087\001\085\001\
\029\001\030\001\085\001\062\001\063\001\038\001\062\001\063\001\
\074\001\220\000\174\000\083\001\135\000\014\001\095\001\163\000\
\017\001\000\000\166\000\048\001\088\001\232\000\062\001\063\001\
\083\001\087\001\055\001\027\001\087\001\087\001\107\001\083\001\
\107\001\062\001\063\001\246\000\003\001\066\001\000\000\062\001\
\017\001\088\001\101\001\102\001\004\001\101\001\101\001\007\001\
\212\000\213\000\214\000\215\000\216\000\217\000\014\001\030\000\
\031\000\017\001\007\001\063\001\224\000\061\001\026\001\045\001\
\093\001\092\001\230\000\234\000\000\000\098\001\234\000\021\001\
\101\001\102\001\026\001\075\001\240\000\003\001\242\000\231\000\
\014\001\233\000\239\000\068\001\039\001\092\001\238\000\014\001\
\007\001\089\001\213\000\214\000\215\000\216\000\217\000\029\001\
\000\001\001\001\002\001\003\001\100\001\224\000\000\000\007\001\
\008\001\007\001\010\001\011\001\068\001\087\001\014\001\015\001\
\013\001\017\001\000\000\090\000\091\000\240\000\062\001\242\000\
\024\001\025\001\026\001\027\001\020\001\029\001\030\001\000\000\
\062\001\063\001\087\001\035\001\007\001\087\001\000\000\039\001\
\021\000\041\001\042\001\043\001\044\001\045\001\036\001\124\000\
\048\001\147\000\080\001\138\000\049\001\083\001\234\000\055\001\
\230\000\172\000\052\001\059\001\203\000\061\001\062\001\063\001\
\051\001\037\001\066\001\067\001\098\001\038\001\004\001\101\001\
\102\001\007\001\255\255\075\001\255\255\077\001\078\001\079\001\
\014\001\255\255\000\000\017\001\003\001\085\001\255\255\087\001\
\088\001\089\001\255\255\255\255\092\001\093\001\255\255\095\001\
\000\001\255\255\098\001\003\001\100\001\101\001\000\001\001\001\
\002\001\003\001\255\255\107\001\027\001\007\001\008\001\004\001\
\255\255\017\001\007\001\255\255\014\001\015\001\255\255\017\001\
\255\255\014\001\026\001\027\001\017\001\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\000\001\026\001\000\000\003\001\
\255\255\035\001\255\255\255\255\255\255\039\001\061\001\041\001\
\042\001\043\001\044\001\045\001\255\255\017\001\255\255\255\255\
\004\001\255\255\255\255\007\001\075\001\061\001\026\001\027\001\
\255\255\059\001\014\001\061\001\068\001\017\001\255\255\255\255\
\066\001\067\001\089\001\075\001\255\255\255\255\255\255\255\255\
\255\255\075\001\000\000\077\001\078\001\100\001\255\255\087\001\
\255\255\089\001\255\255\085\001\255\255\087\001\088\001\089\001\
\255\255\061\001\092\001\255\255\100\001\095\001\000\001\001\001\
\002\001\003\001\100\001\255\255\027\001\007\001\008\001\075\001\
\255\255\107\001\255\255\255\255\014\001\015\001\255\255\017\001\
\255\255\255\255\255\255\087\001\255\255\089\001\024\001\025\001\
\026\001\027\001\255\255\255\255\000\001\255\255\000\000\003\001\
\100\001\035\001\255\255\255\255\255\255\039\001\061\001\041\001\
\042\001\043\001\044\001\045\001\255\255\017\001\255\255\255\255\
\255\255\255\255\255\255\255\255\075\001\255\255\026\001\027\001\
\255\255\059\001\255\255\061\001\255\255\255\255\255\255\255\255\
\066\001\067\001\089\001\062\001\063\001\255\255\255\255\000\000\
\255\255\075\001\000\000\077\001\078\001\100\001\255\255\255\255\
\255\255\255\255\255\255\085\001\000\000\087\001\088\001\089\001\
\083\001\061\001\092\001\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\255\255\255\255\007\001\008\001\075\001\
\255\255\107\001\101\001\102\001\014\001\015\001\255\255\017\001\
\255\255\255\255\027\001\087\001\255\255\089\001\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\000\000\000\000\
\100\001\035\001\255\255\255\255\255\255\039\001\255\255\041\001\
\042\001\043\001\044\001\045\001\255\255\003\001\255\255\255\255\
\255\255\007\001\255\255\255\255\061\001\255\255\255\255\255\255\
\255\255\059\001\255\255\061\001\255\255\255\255\255\255\021\001\
\066\001\067\001\075\001\255\255\255\255\027\001\255\255\255\255\
\255\255\075\001\255\255\077\001\078\001\255\255\255\255\255\255\
\089\001\255\255\255\255\085\001\000\000\087\001\088\001\089\001\
\255\255\255\255\092\001\100\001\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\255\255\255\255\007\001\008\001\061\001\
\255\255\107\001\255\255\255\255\014\001\015\001\255\255\255\255\
\255\255\255\255\255\255\255\255\074\001\075\001\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\035\001\255\255\089\001\255\255\039\001\255\255\041\001\
\042\001\043\001\044\001\045\001\255\255\003\001\100\001\255\255\
\255\255\007\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\255\255\061\001\255\255\010\001\011\001\255\255\
\066\001\067\001\255\255\255\255\255\255\027\001\255\255\255\255\
\255\255\075\001\255\255\077\001\078\001\255\255\255\255\255\255\
\029\001\030\001\255\255\085\001\255\255\087\001\088\001\089\001\
\255\255\255\255\092\001\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\048\001\255\255\255\255\008\001\061\001\
\255\255\107\001\055\001\255\255\014\001\015\001\255\255\017\001\
\255\255\062\001\063\001\255\255\255\255\075\001\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\035\001\079\001\089\001\255\255\039\001\255\255\041\001\
\042\001\043\001\044\001\045\001\255\255\003\001\100\001\255\255\
\093\001\007\001\255\255\255\255\255\255\098\001\255\255\003\001\
\101\001\059\001\255\255\061\001\255\255\255\255\255\255\255\255\
\066\001\067\001\027\001\255\255\255\255\027\001\255\255\255\255\
\255\255\075\001\255\255\077\001\078\001\255\255\255\255\027\001\
\255\255\255\255\255\255\085\001\255\255\087\001\088\001\089\001\
\255\255\255\255\092\001\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\255\255\061\001\007\001\008\001\061\001\
\255\255\107\001\255\255\255\255\014\001\015\001\255\255\017\001\
\255\255\061\001\075\001\255\255\255\255\075\001\024\001\025\001\
\026\001\027\001\027\001\255\255\255\255\255\255\000\000\075\001\
\089\001\035\001\255\255\089\001\255\255\039\001\255\255\041\001\
\042\001\043\001\044\001\100\001\255\255\089\001\100\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\001\
\100\001\059\001\255\255\061\001\061\001\255\255\255\255\255\255\
\066\001\067\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\075\001\075\001\077\001\078\001\255\255\255\255\027\001\
\255\255\255\255\255\255\085\001\255\255\087\001\088\001\089\001\
\089\001\255\255\092\001\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\100\001\255\255\007\001\008\001\255\255\
\255\255\107\001\255\255\255\255\014\001\015\001\255\255\017\001\
\255\255\061\001\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\000\000\075\001\
\255\255\035\001\255\255\255\255\255\255\039\001\255\255\041\001\
\042\001\043\001\044\001\255\255\255\255\089\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\001\255\255\
\100\001\059\001\004\001\061\001\255\255\007\001\255\255\255\255\
\066\001\067\001\255\255\013\001\014\001\255\255\255\255\017\001\
\255\255\075\001\255\255\077\001\078\001\255\255\255\255\255\255\
\026\001\255\255\255\255\085\001\255\255\087\001\088\001\089\001\
\255\255\255\255\092\001\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\255\255\255\255\007\001\008\001\255\255\
\255\255\107\001\255\255\255\255\014\001\015\001\255\255\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\068\001\255\255\255\255\255\255\000\000\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\255\255\041\001\
\042\001\043\001\044\001\085\001\255\255\087\001\088\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\001\059\001\255\255\061\001\004\001\255\255\255\255\007\001\
\066\001\067\001\255\255\255\255\255\255\013\001\014\001\255\255\
\255\255\075\001\255\255\077\001\078\001\255\255\255\255\255\255\
\255\255\255\255\026\001\085\001\255\255\087\001\088\001\089\001\
\255\255\255\255\092\001\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\255\255\255\255\255\255\008\001\255\255\
\255\255\107\001\255\255\255\255\014\001\015\001\255\255\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\068\001\255\255\000\000\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\255\255\041\001\
\042\001\043\001\044\001\045\001\255\255\085\001\255\255\087\001\
\088\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\001\059\001\255\255\061\001\004\001\255\255\255\255\007\001\
\066\001\067\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\075\001\255\255\077\001\078\001\255\255\255\255\255\255\
\255\255\255\255\026\001\085\001\255\255\087\001\088\001\089\001\
\255\255\255\255\092\001\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\255\255\255\255\255\255\008\001\255\255\
\255\255\107\001\255\255\255\255\014\001\015\001\255\255\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\068\001\255\255\000\000\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\255\255\041\001\
\042\001\043\001\044\001\045\001\255\255\085\001\255\255\087\001\
\088\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\255\255\061\001\255\255\255\255\255\255\255\255\
\066\001\067\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\075\001\255\255\077\001\078\001\255\255\255\255\255\255\
\255\255\255\255\255\255\085\001\255\255\087\001\088\001\089\001\
\255\255\255\255\092\001\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\255\255\255\255\007\001\008\001\255\255\
\255\255\107\001\255\255\255\255\014\001\015\001\255\255\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\255\255\041\001\
\042\001\043\001\044\001\045\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\001\255\255\
\255\255\059\001\004\001\255\255\255\255\007\001\255\255\255\255\
\255\255\255\255\255\255\013\001\255\255\255\255\255\255\017\001\
\255\255\075\001\255\255\077\001\078\001\255\255\255\255\255\255\
\026\001\255\255\255\255\085\001\255\255\087\001\088\001\089\001\
\255\255\255\255\092\001\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\000\001\255\255\007\001\008\001\004\001\
\255\255\107\001\007\001\255\255\014\001\015\001\255\255\017\001\
\013\001\255\255\255\255\255\255\017\001\255\255\024\001\025\001\
\026\001\027\001\068\001\255\255\255\255\026\001\000\000\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\255\255\041\001\
\042\001\043\001\255\255\085\001\255\255\087\001\088\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\255\255\061\001\255\255\255\255\255\255\255\255\
\066\001\067\001\255\255\255\255\255\255\255\255\255\255\068\001\
\255\255\075\001\255\255\077\001\078\001\255\255\255\255\255\255\
\255\255\255\255\255\255\085\001\255\255\087\001\088\001\089\001\
\085\001\255\255\087\001\088\001\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\255\255\255\255\007\001\008\001\255\255\
\255\255\107\001\255\255\255\255\014\001\015\001\014\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\255\255\041\001\
\042\001\043\001\042\001\043\001\044\001\045\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\255\255\061\001\014\001\255\255\255\255\255\255\
\066\001\067\001\066\001\067\001\255\255\255\255\255\255\255\255\
\255\255\075\001\255\255\077\001\078\001\255\255\078\001\255\255\
\255\255\000\000\255\255\085\001\255\255\087\001\088\001\089\001\
\255\255\043\001\044\001\045\001\092\001\095\001\000\001\001\001\
\002\001\003\001\100\001\255\255\255\255\007\001\008\001\255\255\
\255\255\107\001\255\255\255\255\014\001\015\001\255\255\017\001\
\066\001\067\001\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\078\001\255\255\000\000\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\255\255\041\001\
\042\001\043\001\092\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\255\255\061\001\255\255\255\255\255\255\255\255\
\066\001\067\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\075\001\255\255\077\001\078\001\255\255\255\255\255\255\
\255\255\255\255\255\255\085\001\255\255\087\001\088\001\089\001\
\255\255\255\255\255\255\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\255\255\255\255\007\001\008\001\255\255\
\255\255\107\001\255\255\255\255\014\001\015\001\255\255\017\001\
\255\255\011\001\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\035\001\255\255\029\001\030\001\039\001\255\255\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\048\001\255\255\
\255\255\059\001\255\255\061\001\255\255\055\001\255\255\255\255\
\066\001\067\001\255\255\255\255\062\001\063\001\000\000\255\255\
\066\001\075\001\255\255\077\001\078\001\255\255\255\255\255\255\
\255\255\255\255\255\255\085\001\255\255\087\001\088\001\089\001\
\255\255\255\255\255\255\085\001\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\093\001\255\255\007\001\008\001\255\255\
\098\001\107\001\255\255\101\001\102\001\015\001\255\255\017\001\
\255\255\011\001\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\035\001\255\255\029\001\030\001\039\001\255\255\041\001\
\042\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\001\255\255\255\255\003\001\255\255\048\001\255\255\
\007\001\059\001\255\255\061\001\255\255\055\001\255\255\255\255\
\255\255\255\255\255\255\255\255\062\001\063\001\255\255\255\255\
\066\001\075\001\025\001\077\001\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\085\001\255\255\087\001\088\001\089\001\
\039\001\255\255\255\255\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\093\001\255\255\007\001\008\001\255\255\
\098\001\107\001\255\255\101\001\102\001\015\001\061\001\017\001\
\255\255\011\001\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\075\001\255\255\000\000\255\255\
\255\255\035\001\255\255\029\001\030\001\039\001\085\001\041\001\
\087\001\088\001\089\001\255\255\255\255\255\255\255\255\255\255\
\095\001\255\255\255\255\255\255\255\255\100\001\048\001\255\255\
\255\255\059\001\255\255\061\001\107\001\055\001\255\255\255\255\
\255\255\255\255\255\255\255\255\062\001\063\001\000\000\255\255\
\066\001\075\001\068\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\085\001\255\255\087\001\088\001\089\001\
\255\255\255\255\255\255\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\093\001\255\255\007\001\008\001\255\255\
\098\001\107\001\255\255\101\001\102\001\015\001\255\255\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\000\001\041\001\
\255\255\003\001\255\255\255\255\255\255\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\255\255\059\001\255\255\061\001\255\255\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\075\001\255\255\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\085\001\255\255\087\001\088\001\089\001\
\255\255\255\255\255\255\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\061\001\255\255\007\001\008\001\255\255\
\255\255\107\001\068\001\255\255\255\255\015\001\255\255\017\001\
\255\255\075\001\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\087\001\255\255\089\001\
\255\255\035\001\092\001\255\255\255\255\039\001\255\255\041\001\
\000\000\255\255\100\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\255\255\061\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\075\001\255\255\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\085\001\255\255\087\001\088\001\089\001\
\255\255\255\255\255\255\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\000\000\255\255\007\001\008\001\255\255\
\255\255\107\001\255\255\255\255\255\255\015\001\255\255\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\035\001\255\255\255\255\255\255\039\001\000\001\041\001\
\255\255\003\001\255\255\000\000\255\255\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\255\255\059\001\255\255\061\001\255\255\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\075\001\255\255\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\085\001\255\255\087\001\088\001\089\001\
\255\255\255\255\255\255\255\255\255\255\095\001\000\001\001\001\
\002\001\003\001\100\001\061\001\255\255\007\001\008\001\255\255\
\255\255\107\001\068\001\255\255\255\255\015\001\255\255\017\001\
\000\000\075\001\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\087\001\255\255\089\001\
\255\255\035\001\092\001\255\255\255\255\039\001\000\001\041\001\
\255\255\003\001\100\001\255\255\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\255\255\017\001\
\255\255\059\001\255\255\061\001\255\255\255\255\024\001\025\001\
\255\255\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\075\001\255\255\077\001\255\255\039\001\255\255\255\255\
\255\255\255\255\000\000\085\001\255\255\087\001\088\001\089\001\
\255\255\255\255\255\255\255\255\255\255\095\001\255\255\255\255\
\255\255\255\255\100\001\061\001\255\255\255\255\255\255\255\255\
\000\001\107\001\255\255\003\001\255\255\255\255\255\255\007\001\
\008\001\075\001\255\255\077\001\255\255\000\000\255\255\015\001\
\255\255\017\001\000\000\085\001\255\255\087\001\088\001\089\001\
\024\001\025\001\255\255\027\001\255\255\095\001\000\001\255\255\
\255\255\003\001\100\001\255\255\255\255\007\001\255\255\039\001\
\255\255\107\001\255\255\255\255\255\255\015\001\255\255\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\255\255\027\001\255\255\000\001\255\255\061\001\003\001\255\255\
\255\255\255\255\007\001\255\255\255\255\039\001\255\255\255\255\
\255\255\255\255\015\001\075\001\017\001\077\001\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\085\001\027\001\087\001\
\088\001\089\001\255\255\061\001\255\255\255\255\255\255\095\001\
\255\255\255\255\039\001\000\001\100\001\255\255\003\001\255\255\
\255\255\075\001\007\001\107\001\255\255\255\255\255\255\255\255\
\255\255\255\255\015\001\085\001\017\001\087\001\088\001\089\001\
\061\001\255\255\255\255\024\001\025\001\095\001\027\001\255\255\
\000\001\255\255\100\001\003\001\255\255\255\255\075\001\007\001\
\255\255\107\001\039\001\255\255\255\255\255\255\255\255\015\001\
\085\001\017\001\087\001\088\001\089\001\255\255\255\255\255\255\
\024\001\025\001\095\001\027\001\255\255\255\255\255\255\100\001\
\061\001\255\255\255\255\255\255\255\255\255\255\107\001\039\001\
\000\001\255\255\255\255\003\001\255\255\255\255\075\001\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\085\001\255\255\087\001\088\001\089\001\061\001\255\255\255\255\
\024\001\025\001\095\001\027\001\255\255\255\255\255\255\100\001\
\255\255\255\255\255\255\075\001\255\255\255\255\107\001\039\001\
\255\255\255\255\255\255\255\255\255\255\085\001\255\255\087\001\
\088\001\089\001\255\255\255\255\255\255\255\255\255\255\095\001\
\255\255\255\255\255\255\255\255\100\001\061\001\255\255\255\255\
\255\255\255\255\000\001\107\001\255\255\003\001\255\255\255\255\
\255\255\007\001\255\255\075\001\008\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\085\001\255\255\087\001\
\088\001\089\001\024\001\025\001\255\255\027\001\255\255\095\001\
\255\255\255\255\255\255\255\255\100\001\000\001\255\255\255\255\
\003\001\039\001\000\001\107\001\007\001\003\001\008\000\255\255\
\255\255\045\000\046\000\255\255\255\255\255\255\050\000\255\255\
\255\255\255\255\020\000\017\001\056\000\024\001\025\001\061\001\
\027\001\255\255\062\000\255\255\026\001\027\001\255\255\255\255\
\034\000\255\255\036\000\255\255\039\001\075\001\255\255\255\255\
\255\255\255\255\255\255\045\000\046\000\255\255\255\255\085\001\
\050\000\087\001\088\001\089\001\255\255\255\255\056\000\255\255\
\255\255\095\001\061\001\255\255\062\000\255\255\100\001\061\001\
\255\255\255\255\255\255\255\255\255\255\107\001\068\001\255\255\
\075\001\255\255\255\255\255\255\255\255\075\001\080\000\255\255\
\255\255\255\255\085\001\255\255\087\001\255\255\089\001\255\255\
\255\255\087\001\255\255\089\001\095\001\129\000\255\255\255\255\
\255\255\100\001\008\000\135\000\255\255\255\255\100\001\255\255\
\107\001\011\001\255\255\255\255\255\255\019\000\255\255\147\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\157\000\124\000\029\001\030\001\001\001\002\001\129\000\
\255\255\255\255\255\255\255\255\008\001\135\000\255\255\045\000\
\046\000\255\255\174\000\015\001\050\000\255\255\048\001\255\255\
\255\255\147\000\056\000\255\255\255\255\055\001\026\001\255\255\
\062\000\255\255\255\255\157\000\062\001\063\001\255\255\035\001\
\066\001\255\255\255\255\255\255\255\255\041\001\042\001\043\001\
\044\001\045\001\255\255\255\255\174\000\255\255\255\255\255\255\
\255\255\213\000\214\000\215\000\216\000\217\000\255\255\059\001\
\255\255\255\255\255\255\093\001\224\000\255\255\066\001\067\001\
\098\001\255\255\230\000\101\001\102\001\255\255\234\000\255\255\
\255\255\077\001\078\001\079\001\240\000\255\255\242\000\255\255\
\255\255\255\255\255\255\213\000\214\000\215\000\216\000\217\000\
\092\001\001\001\002\001\129\000\255\255\255\255\224\000\255\255\
\255\255\135\000\255\255\255\255\230\000\255\255\014\001\255\255\
\234\000\255\255\255\255\255\255\255\255\147\000\240\000\255\255\
\242\000\255\255\026\001\255\255\255\255\255\255\255\255\157\000\
\255\255\255\255\255\255\035\001\255\255\255\255\255\255\255\255\
\255\255\041\001\042\001\043\001\044\001\045\001\255\255\000\001\
\174\000\255\255\255\255\004\001\255\255\255\255\007\001\255\255\
\255\255\255\255\011\001\059\001\013\001\014\001\255\255\255\255\
\017\001\255\255\066\001\067\001\255\255\255\255\255\255\255\255\
\255\255\026\001\255\255\255\255\029\001\030\001\078\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\213\000\
\214\000\215\000\216\000\217\000\092\001\255\255\255\255\048\001\
\255\255\255\255\224\000\255\255\255\255\255\255\055\001\255\255\
\230\000\255\255\255\255\255\255\234\000\062\001\063\001\255\255\
\255\255\066\001\240\000\068\001\242\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\085\001\255\255\087\001\088\001\
\008\001\255\255\255\255\011\001\093\001\255\255\255\255\015\001\
\255\255\098\001\255\255\255\255\101\001\102\001\255\255\255\255\
\255\255\255\255\026\001\255\255\255\255\029\001\030\001\255\255\
\255\255\255\255\255\255\035\001\255\255\255\255\255\255\255\255\
\255\255\041\001\042\001\043\001\044\001\045\001\255\255\255\255\
\048\001\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\255\255\255\255\255\255\059\001\255\255\255\255\062\001\063\001\
\255\255\255\255\066\001\067\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\077\001\078\001\079\001\
\255\255\255\255\008\001\255\255\010\001\011\001\255\255\087\001\
\014\001\015\001\255\255\255\255\092\001\093\001\255\255\255\255\
\255\255\255\255\098\001\255\255\026\001\101\001\102\001\029\001\
\030\001\255\255\032\001\033\001\255\255\035\001\255\255\255\255\
\038\001\255\255\255\255\041\001\042\001\043\001\044\001\045\001\
\255\255\255\255\048\001\255\255\255\255\255\255\255\255\255\255\
\255\255\055\001\255\255\255\255\255\255\059\001\255\255\061\001\
\062\001\063\001\064\001\255\255\066\001\067\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\002\001\077\001\
\078\001\079\001\255\255\255\255\008\001\255\255\010\001\011\001\
\255\255\087\001\255\255\015\001\255\255\255\255\092\001\093\001\
\255\255\255\255\255\255\255\255\098\001\099\001\026\001\101\001\
\255\255\029\001\030\001\255\255\032\001\033\001\255\255\035\001\
\255\255\255\255\038\001\255\255\255\255\041\001\042\001\043\001\
\044\001\045\001\255\255\255\255\048\001\255\255\255\255\255\255\
\010\001\011\001\255\255\055\001\255\255\255\255\255\255\059\001\
\255\255\061\001\062\001\063\001\064\001\255\255\066\001\067\001\
\255\255\027\001\255\255\029\001\030\001\255\255\032\001\033\001\
\255\255\077\001\078\001\079\001\038\001\255\255\255\255\255\255\
\255\255\255\255\255\255\087\001\255\255\255\255\048\001\255\255\
\092\001\093\001\255\255\255\255\255\255\055\001\098\001\099\001\
\255\255\101\001\255\255\061\001\062\001\063\001\064\001\255\255\
\066\001\067\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\075\001\255\255\255\255\255\255\079\001\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\029\001\030\001\089\001\
\032\001\033\001\255\255\093\001\255\255\255\255\038\001\255\255\
\098\001\099\001\100\001\101\001\255\255\255\255\255\255\255\255\
\048\001\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\255\255\255\255\010\001\011\001\255\255\061\001\062\001\063\001\
\064\001\255\255\066\001\067\001\255\255\255\255\255\255\255\255\
\255\255\025\001\255\255\075\001\255\255\029\001\030\001\079\001\
\032\001\033\001\255\255\255\255\255\255\255\255\038\001\255\255\
\255\255\255\255\255\255\255\255\255\255\093\001\255\255\255\255\
\048\001\255\255\098\001\099\001\100\001\101\001\255\255\055\001\
\255\255\255\255\010\001\011\001\255\255\061\001\062\001\063\001\
\064\001\255\255\066\001\067\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\079\001\
\032\001\033\001\255\255\255\255\255\255\255\255\038\001\255\255\
\255\255\255\255\255\255\255\255\255\255\093\001\255\255\255\255\
\048\001\255\255\098\001\099\001\255\255\101\001\255\255\055\001\
\255\255\255\255\010\001\011\001\255\255\061\001\062\001\063\001\
\064\001\255\255\066\001\067\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\079\001\
\032\001\033\001\255\255\255\255\255\255\085\001\038\001\255\255\
\255\255\255\255\255\255\255\255\255\255\093\001\255\255\255\255\
\048\001\255\255\098\001\099\001\255\255\101\001\255\255\055\001\
\255\255\255\255\010\001\011\001\255\255\061\001\062\001\063\001\
\064\001\255\255\066\001\067\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\079\001\
\032\001\033\001\255\255\255\255\255\255\255\255\038\001\087\001\
\255\255\255\255\255\255\255\255\255\255\093\001\255\255\255\255\
\048\001\255\255\098\001\099\001\255\255\101\001\255\255\055\001\
\255\255\255\255\010\001\011\001\255\255\061\001\062\001\063\001\
\064\001\255\255\066\001\067\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\079\001\
\032\001\033\001\255\255\255\255\255\255\255\255\038\001\087\001\
\255\255\255\255\255\255\255\255\255\255\093\001\255\255\255\255\
\048\001\255\255\098\001\099\001\255\255\101\001\255\255\055\001\
\255\255\255\255\255\255\255\255\255\255\061\001\062\001\063\001\
\064\001\255\255\066\001\067\001\255\255\001\001\002\001\255\255\
\255\255\255\255\255\255\255\255\008\001\255\255\255\255\079\001\
\255\255\255\255\014\001\015\001\255\255\017\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\093\001\026\001\255\255\
\255\255\255\255\098\001\099\001\255\255\101\001\255\255\035\001\
\255\255\255\255\255\255\001\001\002\001\041\001\042\001\043\001\
\044\001\045\001\008\001\255\255\255\255\255\255\255\255\255\255\
\014\001\015\001\255\255\017\001\255\255\255\255\255\255\059\001\
\255\255\255\255\024\001\255\255\026\001\255\255\066\001\067\001\
\255\255\255\255\255\255\255\255\255\255\035\001\255\255\255\255\
\255\255\077\001\078\001\041\001\042\001\043\001\044\001\045\001\
\255\255\255\255\255\255\255\255\088\001\255\255\255\255\255\255\
\092\001\001\001\002\001\255\255\255\255\059\001\255\255\255\255\
\008\001\255\255\255\255\255\255\066\001\067\001\014\001\015\001\
\255\255\017\001\255\255\255\255\255\255\255\255\255\255\077\001\
\078\001\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\255\255\255\255\092\001\001\001\
\002\001\041\001\042\001\043\001\044\001\045\001\008\001\255\255\
\255\255\255\255\255\255\255\255\014\001\015\001\255\255\017\001\
\255\255\255\255\255\255\059\001\255\255\255\255\255\255\255\255\
\026\001\255\255\066\001\067\001\255\255\255\255\011\001\255\255\
\255\255\035\001\255\255\255\255\255\255\077\001\078\001\041\001\
\042\001\043\001\044\001\045\001\255\255\255\255\255\255\255\255\
\029\001\030\001\255\255\255\255\092\001\001\001\002\001\255\255\
\255\255\059\001\255\255\255\255\008\001\255\255\255\255\255\255\
\066\001\067\001\014\001\048\001\255\255\255\255\255\255\255\255\
\255\255\255\255\055\001\077\001\078\001\255\255\026\001\255\255\
\255\255\062\001\063\001\255\255\255\255\066\001\255\255\035\001\
\255\255\255\255\092\001\001\001\002\001\041\001\042\001\043\001\
\044\001\045\001\008\001\255\255\255\255\255\255\255\255\255\255\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\059\001\
\093\001\255\255\255\255\255\255\026\001\098\001\066\001\067\001\
\101\001\102\001\255\255\255\255\255\255\035\001\255\255\255\255\
\255\255\077\001\078\001\041\001\042\001\043\001\044\001\045\001\
\255\255\255\255\255\255\087\001\255\255\255\255\255\255\255\255\
\092\001\255\255\255\255\255\255\255\255\059\001\255\255\255\255\
\255\255\255\255\255\255\255\255\066\001\067\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\077\001\
\078\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\092\001"

let yynames_const = "\
  AMPERAMPER\000\
  AMPERSAND\000\
  AND\000\
  AS\000\
  ASSERT\000\
  BACKQUOTE\000\
  BAR\000\
  BARBAR\000\
  BARRBRACKET\000\
  BEGIN\000\
  CLASS\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQUAL\000\
  COLONGREATER\000\
  COMMA\000\
  CONSTRAINT\000\
  DO\000\
  DONE\000\
  DOT\000\
  DOTDOT\000\
  DOWNTO\000\
  ELSE\000\
  END\000\
  EOF\000\
  EQUAL\000\
  EXCEPTION\000\
  EXTERNAL\000\
  FALSE\000\
  FOR\000\
  FUN\000\
  FUNCTION\000\
  FUNCTOR\000\
  GREATER\000\
  GREATERRBRACE\000\
  GREATERRBRACKET\000\
  IF\000\
  IN\000\
  INCLUDE\000\
  INHERIT\000\
  INITIALIZER\000\
  LAZY\000\
  LBRACE\000\
  LBRACELESS\000\
  LBRACKET\000\
  LBRACKETBAR\000\
  LBRACKETLESS\000\
  LBRACKETGREATER\000\
  LESS\000\
  LESSMINUS\000\
  LET\000\
  LPAREN\000\
  MATCH\000\
  METHOD\000\
  MINUS\000\
  MINUSDOT\000\
  MINUSGREATER\000\
  MODULE\000\
  MUTABLE\000\
  NEW\000\
  OBJECT\000\
  OF\000\
  OPEN\000\
  OR\000\
  PLUS\000\
  PRIVATE\000\
  QUESTION\000\
  QUESTIONQUESTION\000\
  QUOTE\000\
  RBRACE\000\
  RBRACKET\000\
  REC\000\
  RPAREN\000\
  SEMI\000\
  SEMISEMI\000\
  SHARP\000\
  SIG\000\
  STAR\000\
  STRUCT\000\
  THEN\000\
  TILDE\000\
  TO\000\
  TRUE\000\
  TRY\000\
  TYPE\000\
  UNDERSCORE\000\
  VAL\000\
  VIRTUAL\000\
  WHEN\000\
  WHILE\000\
  WITH\000\
  "

let yynames_block = "\
  CHAR\000\
  FLOAT\000\
  INFIXOP0\000\
  INFIXOP1\000\
  INFIXOP2\000\
  INFIXOP3\000\
  INFIXOP4\000\
  INT\000\
  INT32\000\
  INT64\000\
  LABEL\000\
  LIDENT\000\
  NATIVEINT\000\
  OPTLABEL\000\
  PREFIXOP\000\
  STRING\000\
  UIDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'structure) in
    Obj.repr(
# 260 "parser.mly"
                                         ( _1 )
# 1587 "parser.ml"
               : Parsetree.structure))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'structure_tail) in
    Obj.repr(
# 265 "parser.mly"
                                                ( _1  )
# 1594 "parser.ml"
               : 'structure))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'structure_tail) in
    Obj.repr(
# 267 "parser.mly"
     ( { pstr_desc = Pstr_eval _1; pstr_loc = _1.pexp_loc } :: _2)
# 1602 "parser.ml"
               : 'structure))
; (fun __caml_parser_env ->
    Obj.repr(
# 270 "parser.mly"
                                                ( [] )
# 1608 "parser.ml"
               : 'structure_tail))
; (fun __caml_parser_env ->
    Obj.repr(
# 271 "parser.mly"
                                                ( [] )
# 1614 "parser.ml"
               : 'structure_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'structure_tail) in
    Obj.repr(
# 273 "parser.mly"
     ( { pstr_desc = Pstr_eval (_2); pstr_loc = _2.pexp_loc } :: _3 )
# 1622 "parser.ml"
               : 'structure_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'structure_item) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'structure_tail) in
    Obj.repr(
# 274 "parser.mly"
                                                ( _2 :: _3 )
# 1630 "parser.ml"
               : 'structure_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'structure_item) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'structure_tail) in
    Obj.repr(
# 275 "parser.mly"
                                                ( _1 :: _2 )
# 1638 "parser.ml"
               : 'structure_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rec_flag) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'let_bindings) in
    Obj.repr(
# 279 "parser.mly"
      ( match _3 with 
	      [{ppat_desc = Ppat_any}, exp] -> mkstr(Pstr_eval exp)
		| _ -> mkstr(Pstr_value(_2, _3)) )
# 1648 "parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_declarations) in
    Obj.repr(
# 283 "parser.mly"
      ( mkstr(Pstr_type(_2)) )
# 1655 "parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_arguments) in
    Obj.repr(
# 285 "parser.mly"
      ( mkstr(Pstr_exception(_2,_3))  )
# 1663 "parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'mod_longident) in
    Obj.repr(
# 287 "parser.mly"
      ( mkstr(Pstr_open _2) )
# 1670 "parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 292 "parser.mly"
                                  ( _1 )
# 1677 "parser.ml"
               : 'seq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 293 "parser.mly"
                                  ( _1 )
# 1684 "parser.ml"
               : 'seq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 294 "parser.mly"
                                  ( mkexp(Pexp_sequence(_1,_3)) )
# 1692 "parser.ml"
               : 'seq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 298 "parser.mly"
      ( _1  )
# 1699 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr_list) in
    Obj.repr(
# 300 "parser.mly"
      ( mkexp(Pexp_apply(_1, _2)) )
# 1707 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'rec_flag) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'let_bindings) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 302 "parser.mly"
      ( mkexp(Pexp_let(_2,_3,_5)) )
# 1716 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_bar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'match_cases) in
    Obj.repr(
# 304 "parser.mly"
      ( mkexp(Pexp_function(_3)) )
# 1724 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fun_def) in
    Obj.repr(
# 306 "parser.mly"
      ( mkexp(Pexp_function([_2,_3])) )
# 1732 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'seq_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_bar) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'match_cases) in
    Obj.repr(
# 308 "parser.mly"
      ( mkexp(Pexp_match(_2, _5)) )
# 1741 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'seq_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_bar) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'match_cases) in
    Obj.repr(
# 310 "parser.mly"
      ( mkexp(Pexp_try(_2,_5)) )
# 1750 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'seq_expr) in
    Obj.repr(
# 312 "parser.mly"
      ( raise_error "try, with (|)" )
# 1757 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_comma_list) in
    Obj.repr(
# 314 "parser.mly"
      ( mkexp(Pexp_tuple(_1)) )
# 1764 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constr_longident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 316 "parser.mly"
      ( mkexp(Pexp_construct(_1, Some _2)) )
# 1772 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'seq_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 318 "parser.mly"
      ( mkexp(Pexp_ifthenelse(_2,_4,Some _6)) )
# 1781 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'seq_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 320 "parser.mly"
      ( mkexp(Pexp_ifthenelse(_2,_4,None)) )
# 1789 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 322 "parser.mly"
      ( mkexp(Pexp_construct(Lident "::", Some(mkexp(Pexp_tuple[_1;_3])))) )
# 1797 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 324 "parser.mly"
      ( mkexp(Pexp_construct(Lident "::", Some(mkexp(Pexp_tuple[_5;_7])))) )
# 1805 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 326 "parser.mly"
      ( mkinfix _1 _2 _3  )
# 1814 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 328 "parser.mly"
      ( mkinfix _1 _2 _3  )
# 1823 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 330 "parser.mly"
      ( mkinfix _1 _2 _3  )
# 1832 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 332 "parser.mly"
      ( mkinfix _1 _2 _3  )
# 1841 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 334 "parser.mly"
      ( mkinfix _1 _2 _3  )
# 1850 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 336 "parser.mly"
      ( mkinfix _1 "+" _3  )
# 1858 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 338 "parser.mly"
      ( mkinfix _1 "-" _3  )
# 1866 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 340 "parser.mly"
      ( mkinfix _1 "-." _3 )
# 1874 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 342 "parser.mly"
      ( mkinfix _1 "*" _3 )
# 1882 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 344 "parser.mly"
      ( mkinfix _1 "=" _3 )
# 1890 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 346 "parser.mly"
      ( mkinfix _1 "<" _3 )
# 1898 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 348 "parser.mly"
      ( mkinfix _1 ">" _3 )
# 1906 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 350 "parser.mly"
      ( mkinfix _1 "or" _3 )
# 1914 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 352 "parser.mly"
      ( mkinfix _1 "||" _3 )
# 1922 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 354 "parser.mly"
      ( mkinfix _1 "&" _3 )
# 1930 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 356 "parser.mly"
      ( mkinfix _1 "&&" _3 )
# 1938 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 358 "parser.mly"
      ( mkinfix _1 ":=" _3 )
# 1946 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'subtractive) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 360 "parser.mly"
      ( mkuminus _1 _2 )
# 1954 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'val_longident) in
    Obj.repr(
# 364 "parser.mly"
      ( mkexp(Pexp_ident _1)  )
# 1961 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 366 "parser.mly"
      ( mkexp(Pexp_constant _1) )
# 1968 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constr_longident) in
    Obj.repr(
# 368 "parser.mly"
      ( mkexp(Pexp_construct(_1,None)) )
# 1975 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 370 "parser.mly"
      ( _2 )
# 1982 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 372 "parser.mly"
      ( raise_error "missing )" )
# 1989 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 374 "parser.mly"
      ( _2 )
# 1996 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 376 "parser.mly"
      ( mkexp(Pexp_construct(Lident "()", None)))
# 2002 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 378 "parser.mly"
      ( raise_error "missing end"  )
# 2009 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 380 "parser.mly"
      (  match mklistexp _2 with
            {pexp_desc = p; pexp_loc = _ }  ->
              {pexp_desc = p; pexp_loc = symbol_rloc()} )
# 2019 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 384 "parser.mly"
      ( raise_error "missing ]"  )
# 2027 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 386 "parser.mly"
      ( mkexp(Pexp_apply(
	          {pexp_desc = Pexp_ident(Lident _1);
			   pexp_loc = rhs_loc 1 }, [_2])) )
# 2037 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 392 "parser.mly"
      ( [_1] )
# 2044 "parser.ml"
               : 'simple_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr_list) in
    Obj.repr(
# 394 "parser.mly"
      ( _1 :: _2 )
# 2052 "parser.ml"
               : 'simple_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_binding) in
    Obj.repr(
# 398 "parser.mly"
                                                ( [_1] )
# 2059 "parser.ml"
               : 'let_bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'let_bindings) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'let_binding) in
    Obj.repr(
# 399 "parser.mly"
                                                ( _1 @ [_3] )
# 2067 "parser.ml"
               : 'let_bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'val_ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_binding) in
    Obj.repr(
# 403 "parser.mly"
      ( ({ppat_desc = Ppat_var _1; ppat_loc = rhs_loc 1}, _2) )
# 2075 "parser.ml"
               : 'let_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 405 "parser.mly"
      ( (_1,_3) )
# 2083 "parser.ml"
               : 'let_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'strict_binding) in
    Obj.repr(
# 409 "parser.mly"
      ( _1  )
# 2090 "parser.ml"
               : 'fun_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_constraint) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 411 "parser.mly"
      ( mkexp(Pexp_constraint(_3, _1))  )
# 2098 "parser.ml"
               : 'fun_binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 415 "parser.mly"
      ( _2  )
# 2105 "parser.ml"
               : 'strict_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_binding) in
    Obj.repr(
# 417 "parser.mly"
      ( mkexp(Pexp_function([_1,_2])) )
# 2113 "parser.ml"
               : 'strict_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'match_action) in
    Obj.repr(
# 420 "parser.mly"
                                                ( [(_1,_2)]  )
# 2121 "parser.ml"
               : 'match_cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'match_cases) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'match_action) in
    Obj.repr(
# 421 "parser.mly"
                                                ( _1 @ [(_3,_4)]  )
# 2130 "parser.ml"
               : 'match_cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'match_action) in
    Obj.repr(
# 424 "parser.mly"
                                                ( _1  )
# 2137 "parser.ml"
               : 'fun_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_def) in
    Obj.repr(
# 426 "parser.mly"
      ( mkexp(Pexp_function([_1,_2])) )
# 2145 "parser.ml"
               : 'fun_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 429 "parser.mly"
                                                ( _2  )
# 2152 "parser.ml"
               : 'match_action))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_comma_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 432 "parser.mly"
                                                ( _1 @ [_3]  )
# 2160 "parser.ml"
               : 'expr_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 433 "parser.mly"
                                                ( [_1; _3]  )
# 2168 "parser.ml"
               : 'expr_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 436 "parser.mly"
                                                ( [_1] )
# 2175 "parser.ml"
               : 'expr_semi_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 437 "parser.mly"
                                                ( _1 @ [_3]  )
# 2183 "parser.ml"
               : 'expr_semi_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 440 "parser.mly"
                                                ( Some _2  )
# 2190 "parser.ml"
               : 'type_constraint))
; (fun __caml_parser_env ->
    Obj.repr(
# 441 "parser.mly"
                                                ( raise_error "missing type"  )
# 2196 "parser.ml"
               : 'type_constraint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pattern) in
    Obj.repr(
# 447 "parser.mly"
      ( _1  )
# 2203 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'val_ident) in
    Obj.repr(
# 449 "parser.mly"
      ( mkpat(Ppat_alias(_1,_3)) )
# 2211 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_comma_list) in
    Obj.repr(
# 451 "parser.mly"
      ( mkpat(Ppat_tuple(_1))  )
# 2218 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constr_longident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 453 "parser.mly"
      ( mkpat(Ppat_construct(_1, Some _2))   )
# 2226 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 455 "parser.mly"
      ( mkpat(Ppat_construct(Lident "::", Some(mkpat(Ppat_tuple([_1; _3]))))) )
# 2234 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 457 "parser.mly"
      ( mkpat(Ppat_or(_1,_3)) )
# 2242 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'val_ident) in
    Obj.repr(
# 461 "parser.mly"
      ( mkpat(Ppat_var _1)  )
# 2249 "parser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 463 "parser.mly"
      ( mkpat(Ppat_any) )
# 2255 "parser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'signed_constant) in
    Obj.repr(
# 465 "parser.mly"
      ( mkpat(Ppat_constant _1) )
# 2262 "parser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constr_longident) in
    Obj.repr(
# 467 "parser.mly"
      ( mkpat(Ppat_construct(_1,None)) )
# 2269 "parser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 469 "parser.mly"
      ( match mklistpat _2 with 
 	      {ppat_desc = p; ppat_loc = _} -> 
	           {ppat_desc = p; ppat_loc = symbol_rloc()} )
# 2279 "parser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 473 "parser.mly"
      ( raise_error "missing ]"   )
# 2287 "parser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 475 "parser.mly"
      ( _2 )
# 2294 "parser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 477 "parser.mly"
      ( raise_error "missing )"  )
# 2301 "parser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'core_type) in
    Obj.repr(
# 479 "parser.mly"
      ( mkpat(Ppat_constraint(_2,_4))  )
# 2309 "parser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'core_type) in
    Obj.repr(
# 481 "parser.mly"
      ( raise_error "missing )"  )
# 2317 "parser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_comma_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 485 "parser.mly"
                                                ( _1 @ [_3] )
# 2325 "parser.ml"
               : 'pattern_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 486 "parser.mly"
                                                ( [_1; _3] )
# 2333 "parser.ml"
               : 'pattern_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 489 "parser.mly"
                                                ( [_1] )
# 2340 "parser.ml"
               : 'pattern_semi_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 490 "parser.mly"
                                                ( _1 @ [_3] )
# 2348 "parser.ml"
               : 'pattern_semi_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_declaration) in
    Obj.repr(
# 495 "parser.mly"
                                                ( [_1] )
# 2355 "parser.ml"
               : 'type_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_declarations) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_declaration) in
    Obj.repr(
# 496 "parser.mly"
                                                ( _1 @ [_3] )
# 2363 "parser.ml"
               : 'type_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_parameters) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_kind) in
    Obj.repr(
# 501 "parser.mly"
      ( (_2, {ptype_params = _1;
	          ptype_kind = _3;
			  ptype_loc = symbol_rloc()}) )
# 2374 "parser.ml"
               : 'type_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 507 "parser.mly"
      ( Ptype_abstract(None) )
# 2380 "parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 509 "parser.mly"
      ( Ptype_abstract(Some _2) )
# 2387 "parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_declarations) in
    Obj.repr(
# 511 "parser.mly"
      ( Ptype_variant(_2)  )
# 2394 "parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'private_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_declarations) in
    Obj.repr(
# 513 "parser.mly"
      ( Ptype_variant(_4)  )
# 2402 "parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    Obj.repr(
# 517 "parser.mly"
                                                ( [] )
# 2408 "parser.ml"
               : 'type_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_parameter) in
    Obj.repr(
# 518 "parser.mly"
                                                ( [_1]  )
# 2415 "parser.ml"
               : 'type_parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_parameter_list) in
    Obj.repr(
# 519 "parser.mly"
                                                ( _2 )
# 2422 "parser.ml"
               : 'type_parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 523 "parser.mly"
                                 ( _2 )
# 2429 "parser.ml"
               : 'type_parameter))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_parameter) in
    Obj.repr(
# 526 "parser.mly"
                                                ( [_1] )
# 2436 "parser.ml"
               : 'type_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_parameter_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_parameter) in
    Obj.repr(
# 527 "parser.mly"
                                                ( _1 @ [_3] )
# 2444 "parser.ml"
               : 'type_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_declaration) in
    Obj.repr(
# 531 "parser.mly"
                                                ( [_1]  )
# 2451 "parser.ml"
               : 'constructor_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constructor_declarations) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_declaration) in
    Obj.repr(
# 532 "parser.mly"
                                                         ( _1 @ [_3]  )
# 2459 "parser.ml"
               : 'constructor_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constr_ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_arguments) in
    Obj.repr(
# 535 "parser.mly"
                                                ( (_1,_2, symbol_rloc())  )
# 2467 "parser.ml"
               : 'constructor_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 538 "parser.mly"
                                                ( [] )
# 2473 "parser.ml"
               : 'constructor_arguments))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'core_type_list) in
    Obj.repr(
# 539 "parser.mly"
                                                ( _2 )
# 2480 "parser.ml"
               : 'constructor_arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'core_type2) in
    Obj.repr(
# 545 "parser.mly"
                                               ( _1 )
# 2487 "parser.ml"
               : 'core_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_core_type_or_tuple) in
    Obj.repr(
# 548 "parser.mly"
                                               ( _1 )
# 2494 "parser.ml"
               : 'core_type2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'core_type2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type2) in
    Obj.repr(
# 550 "parser.mly"
      ( mktyp(Ptyp_arrow (_1, _3)) )
# 2502 "parser.ml"
               : 'core_type2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_core_type2) in
    Obj.repr(
# 555 "parser.mly"
      ( _1 )
# 2509 "parser.ml"
               : 'simple_core_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'core_type_comma_list) in
    Obj.repr(
# 557 "parser.mly"
      ( match _2 with [sty] -> sty | _ -> raise_error "???" )
# 2516 "parser.ml"
               : 'simple_core_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 561 "parser.mly"
      ( mktyp(Ptyp_var (_2)) )
# 2523 "parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    Obj.repr(
# 563 "parser.mly"
      ( mktyp(Ptyp_any) )
# 2529 "parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_longident) in
    Obj.repr(
# 565 "parser.mly"
      ( mktyp(Ptyp_constr(_1, [])) )
# 2536 "parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_core_type2) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_longident) in
    Obj.repr(
# 567 "parser.mly"
      ( mktyp(Ptyp_constr(_2, [_1])) )
# 2544 "parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'core_type_comma_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_longident) in
    Obj.repr(
# 569 "parser.mly"
      ( mktyp(Ptyp_constr(_4, List.rev _2)) )
# 2552 "parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_core_type) in
    Obj.repr(
# 572 "parser.mly"
                                                ( _1 )
# 2559 "parser.ml"
               : 'simple_core_type_or_tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_core_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type_list) in
    Obj.repr(
# 574 "parser.mly"
      ( mktyp( Ptyp_tuple(_1::_3))  )
# 2567 "parser.ml"
               : 'simple_core_type_or_tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 577 "parser.mly"
                                                ( [_1] )
# 2574 "parser.ml"
               : 'core_type_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'core_type_comma_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 578 "parser.mly"
                                                ( _1 @ [_3] )
# 2582 "parser.ml"
               : 'core_type_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_core_type) in
    Obj.repr(
# 581 "parser.mly"
                                                ( [_1] )
# 2589 "parser.ml"
               : 'core_type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'core_type_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_core_type) in
    Obj.repr(
# 582 "parser.mly"
                                                ( _1 @ [_3] )
# 2597 "parser.ml"
               : 'core_type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 588 "parser.mly"
                                                ( Const_int (_1) )
# 2604 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 589 "parser.mly"
                                                ( Const_char (_1) )
# 2611 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 590 "parser.mly"
                                                ( Const_string (_1) )
# 2618 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 591 "parser.mly"
                                                ( Const_float (_1) )
# 2625 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 594 "parser.mly"
                                                ( _1 )
# 2632 "parser.ml"
               : 'signed_constant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 595 "parser.mly"
                                                ( Const_int(-1 * _2) )
# 2639 "parser.ml"
               : 'signed_constant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 596 "parser.mly"
                                                ( Const_float("-" ^ _2) )
# 2646 "parser.ml"
               : 'signed_constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 601 "parser.mly"
                                                ( _1  )
# 2653 "parser.ml"
               : 'ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 602 "parser.mly"
                                                ( _1 )
# 2660 "parser.ml"
               : 'ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 606 "parser.mly"
                                                ( _1 )
# 2667 "parser.ml"
               : 'val_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'operator) in
    Obj.repr(
# 607 "parser.mly"
                                                ( _2 )
# 2674 "parser.ml"
               : 'val_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 611 "parser.mly"
                                                ( _1 )
# 2681 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 612 "parser.mly"
                                                ( _1 )
# 2688 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 613 "parser.mly"
                                                ( _1 )
# 2695 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 614 "parser.mly"
                                                ( _1 )
# 2702 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 615 "parser.mly"
                                                ( _1 )
# 2709 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 616 "parser.mly"
                                                ( _1 )
# 2716 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 617 "parser.mly"
                                                ( "+" )
# 2722 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 618 "parser.mly"
                                                ( "-" )
# 2728 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 619 "parser.mly"
                                                ( "-." )
# 2734 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 620 "parser.mly"
                                                ( "*" )
# 2740 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 621 "parser.mly"
                                                ( "=" )
# 2746 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 622 "parser.mly"
                                                ( "<" )
# 2752 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 623 "parser.mly"
                                                ( ">" )
# 2758 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 624 "parser.mly"
                                                ( "or" )
# 2764 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 625 "parser.mly"
                                                ( "||" )
# 2770 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 626 "parser.mly"
                                                ( "&" )
# 2776 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 627 "parser.mly"
                                                ( "&&" )
# 2782 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 628 "parser.mly"
                                                ( ":=" )
# 2788 "parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 631 "parser.mly"
                                                ( _1 )
# 2795 "parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 632 "parser.mly"
                                                ( "()" )
# 2801 "parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 633 "parser.mly"
                                                ( "::" )
# 2807 "parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 634 "parser.mly"
                                                ( "false" )
# 2813 "parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 635 "parser.mly"
                                                ( "true" )
# 2819 "parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'val_ident) in
    Obj.repr(
# 639 "parser.mly"
                                                ( Lident _1 )
# 2826 "parser.ml"
               : 'val_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'val_ident) in
    Obj.repr(
# 640 "parser.mly"
                                                ( Ldot(_1, _3) )
# 2834 "parser.ml"
               : 'val_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mod_longident) in
    Obj.repr(
# 643 "parser.mly"
                                                ( _1 )
# 2841 "parser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    Obj.repr(
# 644 "parser.mly"
                                                ( Lident "[]" )
# 2847 "parser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    Obj.repr(
# 645 "parser.mly"
                                                ( Lident "()" )
# 2853 "parser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    Obj.repr(
# 646 "parser.mly"
                                                ( Lident "false" )
# 2859 "parser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    Obj.repr(
# 647 "parser.mly"
                                                ( Lident "true" )
# 2865 "parser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 651 "parser.mly"
                                                ( Lident _1 )
# 2872 "parser.ml"
               : 'type_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_ext_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 652 "parser.mly"
                                                ( Ldot(_1, _3) )
# 2880 "parser.ml"
               : 'type_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 656 "parser.mly"
                                                ( Lident _1 )
# 2887 "parser.ml"
               : 'mod_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 657 "parser.mly"
                                                ( Ldot(_1, _3) )
# 2895 "parser.ml"
               : 'mod_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 660 "parser.mly"
                                                ( Lident _1 )
# 2902 "parser.ml"
               : 'mod_ext_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_ext_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 661 "parser.mly"
                                                ( Ldot(_1, _3) )
# 2910 "parser.ml"
               : 'mod_ext_longident))
; (fun __caml_parser_env ->
    Obj.repr(
# 666 "parser.mly"
                                                ( Nonrecursive )
# 2916 "parser.ml"
               : 'rec_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 667 "parser.mly"
                                                ( Recursive )
# 2922 "parser.ml"
               : 'rec_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 671 "parser.mly"
                                                ( () )
# 2928 "parser.ml"
               : 'private_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 672 "parser.mly"
                                                ( () )
# 2934 "parser.ml"
               : 'private_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 676 "parser.mly"
                                                ( () )
# 2940 "parser.ml"
               : 'opt_bar))
; (fun __caml_parser_env ->
    Obj.repr(
# 677 "parser.mly"
                                                ( () )
# 2946 "parser.ml"
               : 'opt_bar))
; (fun __caml_parser_env ->
    Obj.repr(
# 680 "parser.mly"
                                                ( () )
# 2952 "parser.ml"
               : 'opt_semi))
; (fun __caml_parser_env ->
    Obj.repr(
# 681 "parser.mly"
                                                ( () )
# 2958 "parser.ml"
               : 'opt_semi))
; (fun __caml_parser_env ->
    Obj.repr(
# 685 "parser.mly"
                                                ( "-" )
# 2964 "parser.ml"
               : 'subtractive))
; (fun __caml_parser_env ->
    Obj.repr(
# 686 "parser.mly"
                                                ( "-." )
# 2970 "parser.ml"
               : 'subtractive))
(* Entry implementation *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let implementation (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Parsetree.structure)
;;
