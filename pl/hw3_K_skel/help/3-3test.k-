let proc leaf(n)=
	{value:=n, left:={}, right:={}} in
let proc makeLtree(n,t)=
	{value:=n, left:=t, right:={}} in
let proc makeRtree(n,t)=
	{value:=n,left:={},right:=t} in
let proc makeTree(n,t1,t2)=
	{value:=n,left:=t1,right:=t2} in
let proc isEmpty(t)=
	if t={} then true else false in 
let proc rTree(t)=
	t.right in
let proc lTree(t)=
	t.left in
let proc nodeVal(t)=
	t.value in 
let proc dft(t)=
	if (not isEmpty(t)) then ((write(nodeVal(t)));	
	if (not isEmpty(t.left)) then dft(t.left) else 0;
	if (not isEmpty(t.right)) then dft(t.right) else 0) else 0 in 
let queue:={tree:={}, next:={}} in
let n:={tree:={}, next:={}} in
let proc bft(t)=
	queue:={tree:=t, next:=queue};
	n:=queue.next;
	while (not isEmpty(queue.tree)) do
	(
	 	write(nodeVal(queue.tree));
		 if (not isEmpty(queue.tree.left)) then 
		 (
		  n.tree:=queue.tree.left;
		  n.next:={tree:={}, next:={}};
		  n:=n.next
		 )  else 0;
		 if (not isEmpty(queue.tree.right)) then
		 (
		  n.tree:=queue.tree.right;
		  n.next:={tree:={}, next:={}};
		  n:=n.next
		 ) else 0;
		queue:=queue.next
	)
    
	in let t0:=makeTree(0, (makeTree(1, leaf(2), leaf(3))), leaf(4)) in dft(t0)
